// Использованы обработки:
//    https://its.1c.ru/db/v8std#content:2149184105:hdoc из системы стандартов и методик 1С

Перем КоличествоСимволовДляПереносаКомментария;
Перем Настройки Экспорт;

Функция Форматировать( ДокументТекст ) Экспорт
	
	Если Не Настройки["ОграничениеДлиныСтроки"] = Неопределено Тогда
		КоличествоСимволовДляПереносаКомментария = Настройки["ОграничениеДлиныСтроки"];
	КонецЕсли;

	файлИзменен = ПроверкаФорматаКомментария(ДокументТекст);
	файлИзменен = ПроверкаКаноническогоНаписанияКлючевыхСловЗапроса(ДокументТекст) ИЛИ файлИзменен;
	файлИзменен = ПроверкаКаноническогоНаписанияКлючевыхСлов(ДокументТекст)        ИЛИ файлИзменен;
	файлИзменен = ПроверкаКомментариевНаДопустимуюДлину(ДокументТекст)             ИЛИ файлИзменен;
	файлИзменен = ПроверкаОператоровСКрайнейЛевойПозиции(ДокументТекст)            ИЛИ файлИзменен;
	
	Возврат файлИзменен;
	
КонецФункции


Функция ПроверкаФорматаКомментария(ДокументТекст)
	
	ФайлИзменен = Ложь;
	
	МассивСтрокИсключений = Новый Массив;
	МассивСтрокИсключений.Добавить("_Демо начало примера");
	МассивСтрокИсключений.Добавить("_Демо конец примера");
	
	СтрокаСимволовОкончанияКомментария = ".!?:;…-";
	
	КоличествоСтрок = ДокументТекст.КоличествоСтрок();
	
	МногострочныйКомментарий = "";
	НомерСтрокиНачалаКомментария = 0;
	НадоПроверитьКомментарий = Ложь;
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		Если НадоПроверитьКомментарий Тогда
			
			НадоПроверитьКомментарий = Ложь;
			// Комментарий кончился, проверяем накопленный многострочный комментарий.
			Если НЕ ПустаяСтрока(МногострочныйКомментарий) Тогда 
				МногострочныйКомментарий = СокрЛП(МногострочныйКомментарий);
				
				// Определяем, является ли комментарий длинным, по критериям:
				//   однострочный комментарий - длинный, если его длина больше 80 символов;
				//   многострочный комментарий - длинный, если хотя бы 1 его строка длиннее 30-ти символов.
				КоличествоСтрокКомментария = СтрЧислоСтрок(МногострочныйКомментарий);
				Если КоличествоСтрокКомментария = 1 Тогда 
					ЭтоДлинныйКомментарий = СтрДлина(МногострочныйКомментарий) > 80;
				Иначе 
					ЭтоДлинныйКомментарий = Ложь;
					Для Счетчик = 1 По КоличествоСтрокКомментария Цикл
						СтрокаМногострочногоКомментария = СтрПолучитьСтроку(МногострочныйКомментарий, Счетчик);
						Если СтрДлина(СтрокаМногострочногоКомментария) > 30 Тогда 
							ЭтоДлинныйКомментарий = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если ЭтоДлинныйКомментарий Тогда 
					
					// Длинный комментарий должен начинаться с большой буквы.
					ПервыйСимвол = Лев(МногострочныйКомментарий, 1);
					Если ВРег(ПервыйСимвол) <> ПервыйСимвол Тогда
						// Проверим, что комментарий не начался в предыдущей строке.
						ПредыдущаяСтрока = ДокументТекст.ПолучитьСтроку(НомерСтрокиНачалаКомментария - 1);
						ПредыдущаяСтрока = СокрЛ(ПредыдущаяСтрока);
						
						Если СтрНайти(ПредыдущаяСтрока, "//") = 0 Тогда 
							
							ИсходнаяСтрока = ДокументТекст.ПолучитьСтроку(НомерСтрокиНачалаКомментария);
							ПозицияКомментария = СтрНайти(ИсходнаяСтрока, "//");
							Если ПозицияКомментария > 0 Тогда 
								
								НоваяСтрока = ИсходнаяСтрока;
								
								ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
								Для Счетчик = 1 По ДлинаСтроки Цикл 
									Символ = Сред(ИсходнаяСтрока, Счетчик, 1);
									Если Символ <> ВРег(Символ) Тогда 
										НоваяСтрока = Лев(ИсходнаяСтрока, Счетчик - 1);
										НоваяСтрока = НоваяСтрока + ВРег(Символ);
										НоваяСтрока = НоваяСтрока + Сред(ИсходнаяСтрока, Счетчик + 1);
										Прервать;
									КонецЕсли;
								КонецЦикла;
								
								ДокументТекст.ЗаменитьСтроку(НомерСтрокиНачалаКомментария, НоваяСтрока);
								
								ФайлИзменен = Истина;
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
					
					// Длинный комментарий должен заканчиваться на точку.
					ПоследнийСимвол = Прав(МногострочныйКомментарий, 1);
					Если СтрНайти(СтрокаСимволовОкончанияКомментария, ПоследнийСимвол) = 0 Тогда 
						НомерСтрокиКонцаКомментария = НомерСтрокиНачалаКомментария + КоличествоСтрокКомментария - 1;
						
						ИсходнаяСтрока = ДокументТекст.ПолучитьСтроку(НомерСтрокиКонцаКомментария);
						ПозицияКомментария = СтрНайти(ИсходнаяСтрока, "//");
						Если ПозицияКомментария > 0 Тогда 
							СтрокаЗаменыСимволов = ",";
							
							ИсходнаяСтрока = СокрП(ИсходнаяСтрока);
							ПоследнийСимвол = Прав(ИсходнаяСтрока, 1);
							
							Если СтрНайти(СтрокаЗаменыСимволов, ПоследнийСимвол) = 0 Тогда 
								НоваяСтрока = ИсходнаяСтрока + ".";
							Иначе 
								НоваяСтрока = Лев(ИсходнаяСтрока, СтрДлина(ИсходнаяСтрока) - 1) + ".";
							КонецЕсли;
							
							ДокументТекст.ЗаменитьСтроку(НомерСтрокиКонцаКомментария, НоваяСтрока);
							ФайлИзменен = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				МногострочныйКомментарий = "";
			КонецЕсли;
		КонецЕсли;
		
		СтрокаМодуляИсходная = ДокументТекст.ПолучитьСтроку(НомерСтроки);
		Если ПустаяСтрока(СтрокаМодуляИсходная) Тогда 
			НадоПроверитьКомментарий = Истина;
			Продолжить;
		КонецЕсли;
		
		СтрокаМодуляИсходная = СокрЛП(СтрокаМодуляИсходная);
		
		// Если это не комментарий, тогда пропускаем.
		Если Лев(СтрокаМодуляИсходная, 2) <> "//" Тогда 
			НадоПроверитьКомментарий = Истина;
			Продолжить;
		КонецЕсли;
		
		Строка = СтрокаМодуляИсходная;
		
		// Если после удаления символов "//" строка пустая, то пропускаем.
		Строка = СтрЗаменить(Строка, "/", "");
		Если ПустаяСтрока(Строка) Тогда 
			НадоПроверитьКомментарий = Истина;
			Продолжить;
		КонецЕсли;
		
		// Если строка состоит только из символов верхнего регистра, то это, например, объявление области, пропускаем.
		Если ВРег(Строка) = Строка Тогда 
			// Пропускаем, если до этого в комментарий пустой.
			// Возможно, перечисление параметров, тогда пропускать не нужно.
			Если ПустаяСтрока(МногострочныйКомментарий) Тогда 
				Продолжить;
			КонецЕсли;
			
			// Проверим следующую строку.
			СледующаяСтрока = ДокументТекст.ПолучитьСтроку(НомерСтроки + 1);
			СледующаяСтрока = СтрЗаменить(СледующаяСтрока, "/", "");
			Если ПустаяСтрока(СледующаяСтрока) Тогда 
				МногострочныйКомментарий = "";
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЭтоИсключение = ЭтоКод(Строка);
		
		// Проверяем пробел (таб) в начале строки.
		Если СокрЛ(Строка) = Строка Тогда 
			// Закомментированный код проверять не нужно.
			Если НЕ ЭтоИсключение Тогда 
				ИсходнаяСтрока = ДокументТекст.ПолучитьСтроку(НомерСтроки);
				ПозицияКомментария = СтрНайти(ИсходнаяСтрока, "//");
				Если ПозицияКомментария > 0 Тогда 
					СтрокаПослеКомментария = Сред(ИсходнаяСтрока, ПозицияКомментария + 2);
					НоваяСтрока = Лев(ИсходнаяСтрока, ПозицияКомментария - 1) + "// " + СтрокаПослеКомментария;
					ДокументТекст.ЗаменитьСтроку(НомерСтроки, НоваяСтрока);
					
					ФайлИзменен = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НадоПроверитьКомментарий = Ложь;
		
		// Отдельно проверяем описание области.
		Если НЕ ЭтоИсключение Тогда
			ЭтоИсключение = СтрокаСодержитОписаниеОбласти(СокрЛП(Строка));
		КонецЕсли;
		
		// Проверяем исключения из массива.
		Если НЕ ЭтоИсключение Тогда 
			Для Каждого СтрокаИсключения Из МассивСтрокИсключений Цикл 
				Если СтрНайти(Строка, СтрокаИсключения) > 0 Тогда 
					ЭтоИсключение = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Для комментариев вида:
		// Обработка входящих сообщений с типом {http://www.1c.ru/1cFresh/ApplicationExtensions/Management/a.b.c.d}InstallExtension
		// Делаем исключение по вхождению в комментарий гиперссылки "http://www.".
		// Если до конца строки пробелов нет, это исключение.
		Если НЕ ЭтоИсключение Тогда 
			ПозицияГиперссылки = СтрНайти(СтрокаМодуляИсходная, "http://www.");
			Если ПозицияГиперссылки > 0 Тогда 
				СтрокаГиперссылки = Сред(СтрокаМодуляИсходная, ПозицияГиперссылки);
				ЭтоИсключение = (СтрНайти(СтрокаГиперссылки, " ") = 0);
			КонецЕсли;
		КонецЕсли;
		
		// Если это исключение, проверяем следующую строку.
		Если ЭтоИсключение Тогда 
			СледующаяСтрока = ДокументТекст.ПолучитьСтроку(НомерСтроки + 1);
			
			// Если следующая строка не содержит комментарий, то пропукаем.
			СледующаяСтрока = СокрЛ(СледующаяСтрока);
			Если Лев(СледующаяСтрока, 2) <> "//" Тогда 
				МногострочныйКомментарий = "";
				Продолжить;
			КонецЕсли;
			
			// Если следующая строка пустая, то пропускаем.
			СледующаяСтрока = СтрЗаменить(СледующаяСтрока, "/", "");
			Если ПустаяСтрока(СледующаяСтрока) Тогда 
				МногострочныйКомментарий = "";
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(МногострочныйКомментарий) Тогда 
			НомерСтрокиНачалаКомментария = НомерСтроки;
		КонецЕсли;
		
		МногострочныйКомментарий = МногострочныйКомментарий + Строка + Символы.ПС;
		
	КонецЦикла;
	
	Возврат ФайлИзменен;
	
КонецФункции

Функция ПроверкаКаноническогоНаписанияКлючевыхСловЗапроса(ДокументТекст)
	
	// Набор строк-исключений, точно не встречающихся в запросах.
	Исключения = Новый Массив;
	Исключения.Добавить("RU");
	Исключения.Добавить("EN");
	
	// Набор операторов для поиска кода, написанного на языке запросов.
	ОператорыЗапроса = Новый Массив;
	ОператорыЗапроса.Добавить("ВЫБРАТЬ");
	ОператорыЗапроса.Добавить("СГРУППИРОВАТЬ ПО");
	ОператорыЗапроса.Добавить("АВТОУПОРЯДОЧИВАНИЕ");
	ОператорыЗапроса.Добавить("ИТОГИ");
	ОператорыЗапроса.Добавить("УПОРЯДОЧИТЬ ПО");
	ОператорыЗапроса.Добавить("ПОМЕСТИТЬ");
	ОператорыЗапроса.Добавить("ОБЪЕДИНИТЬ");
	
	// Составляем набор эталонов
	Эталоны = Новый Массив;
	Эталоны.Добавить("ВЫБРАТЬ");
	Эталоны.Добавить("КАК");
	Эталоны.Добавить("ПО");
	Эталоны.Добавить("ПОМЕСТИТЬ");
	Эталоны.Добавить("АВТОУПОРЯДОЧИВАНИЕ");
	Эталоны.Добавить("ИЕРАРХИЯ");
	Эталоны.Добавить("ВЫБОР");
	Эталоны.Добавить("ТОГДА");
	Эталоны.Добавить("КОГДА");
	Эталоны.Добавить("ЕСЛИ");
	Эталоны.Добавить("КОНЕЦ");
	Эталоны.Добавить("ИНАЧЕ");
	Эталоны.Добавить("МЕЖДУ");
	Эталоны.Добавить("В");
	Эталоны.Добавить("В ИЕРАРХИИ");
	Эталоны.Добавить("ПОДОБНО");
	Эталоны.Добавить("ИМЕЮЩИЕ");
	Эталоны.Добавить("УПОРЯДОЧИТЬ");
	Эталоны.Добавить("ГДЕ");
	Эталоны.Добавить("ИЗ");
	Эталоны.Добавить("ИСТИНА");
	Эталоны.Добавить("ЛОЖЬ");
	Эталоны.Добавить("ПЕРВЫЕ");
	Эталоны.Добавить("РАЗРЕШЕННЫЕ");
	Эталоны.Добавить("ИТОГИ");
	Эталоны.Добавить("ПОЛНОЕ");
	Эталоны.Добавить("СОЕДИНЕНИЕ");
	Эталоны.Добавить("ЛЕВОЕ");
	Эталоны.Добавить("ПРАВОЕ");
	Эталоны.Добавить("ВНУТРЕННЕЕ");
	Эталоны.Добавить("РАЗЛИЧНЫЕ");
	Эталоны.Добавить("УБЫВ");
	Эталоны.Добавить("ВОЗР");
	Эталоны.Добавить("СГРУППИРОВАТЬ ПО");
	Эталоны.Добавить("ОБЩИЕ");
	Эталоны.Добавить("НЕ");
	Эталоны.Добавить("И");
	Эталоны.Добавить("ИЛИ");
	Эталоны.Добавить("ЕСТЬ NULL");
	Эталоны.Добавить("ОБЪЕДИНИТЬ");
	
	КлючевыеСлова = Новый ТаблицаЗначений;
	КлючевыеСлова.Колонки.Добавить("Наименование");
	
	Для Каждого Эталон Из Эталоны Цикл
		СтрокаТаблицы = КлючевыеСлова.Добавить();
		СтрокаТаблицы.Наименование = НРег(Эталон);
	КонецЦикла;
	
	КлючевыеСлова.Свернуть("Наименование");
	
	ФайлИзменен = Ложь;
	Буфер = ДокументТекст.ПолучитьТекст();
	ПозицияНачалаБлока = 0;
	БлокВКавычках = "";
	
	// Удаляем из модуля двойные кавычки.
	Буфер = СтрЗаменить(Буфер, """""", "<<ДВОЙНЫЕКАВЫЧКИ>>");
	
	// Инициализируем разбор текста модуля.
	ТекстРазбора = Новый ТекстовыйДокумент;
	ТекстРазбора.УстановитьТекст(Буфер);
	ВсегоСтрок = ТекстРазбора.КоличествоСтрок();
	СтрокаОткрыта = Ложь;
	ФлагЗапрос = Ложь;
	ОбластьОткрыта = Ложь;
	 
	// Проверяем каждую строку до начала комментария.
	Для Счетчик = 1 По ВсегоСтрок Цикл
		
		СтрокаМодуля = ТекстРазбора.ПолучитьСтроку(Счетчик);
		ОбластьОткрыта = ИсключениеИспользованияМодальности(СтрокаМодуля, ОбластьОткрыта);
		
		Если ОбластьОткрыта Тогда
			Продолжить;
		КонецЕсли;
		
		// Если строка закрыта; пример открытой строки (следующая строка): Запрос = Новый Запрос("
		// |ВЫБРАТЬ
		// ..."
		// Например, URLСтрока = "http://downloads.v8.1c.ru/tmplts/ITS/KLADR/"; - не проверяем на комментарий.
		СтрокаМодуля = СтрЗаменить(СтрокаМодуля, "://", "<<ВНЕШНЕЕСОЕДИНЕНИЕ>>");
		ПозицияКомментария = СтрНайти(СтрокаМодуля, "//");
		
		Если ПозицияКомментария > 0 Тогда // есть комментарий
			
			ПозицияКавычек = СтрНайти(СтрокаМодуля, """");
			Если ПозицияКавычек = 0 Тогда // Нет кавычек, удаляем комментарий.
				СтрокаМодуля = Лев(СтрокаМодуля, ПозицияКомментария - 1);
			// Кавычки после комментария, удаляем комментарий.
			ИначеЕсли ПозицияКавычек > ПозицияКомментария И НЕ СтрокаОткрыта Тогда 
				СтрокаМодуля = Лев(СтрокаМодуля, ПозицияКомментария - 1);
			Иначе
				КоличествоКавычекДоКомментария = СтрЧислоВхождений(Лев(СтрокаМодуля, ПозицияКомментария), """");
				// Строка открывается и закрывается до комментария, удаляем комментарий.
				Если КоличествоКавычекДоКомментария % 2 = 0 И НЕ СтрокаОткрыта Тогда 
					СтрокаМодуля = Лев(СтрокаМодуля, ПозицияКомментария - 1);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Вырезаем часть строки в кавычках.
		ПозицияКавычек = СтрНайти(СтрокаМодуля, """");
		ПредыдущаяПозицияКавычек = 0;
		ПереносСтроки = Истина;
		
		Пока ПозицияКавычек > 0 Цикл
			
			Если СтрокаОткрыта Тогда
				
				// Кавычки закрывают строку, вырезаем часть в кавычках.
				СтрокаМодуляВКавычках = Сред(СтрокаМодуля, 1, ПозицияКавычек - 1);
				
				Если БлокВКавычках <> "" И ПереносСтроки Тогда
					БлокВКавычках = БлокВКавычках + Символы.ПС;
				КонецЕсли;
				
				БлокВКавычках = БлокВКавычках + СтрокаМодуляВКавычках;
				ФлагСловоИсключение = Ложь;
				ФлагЗапрос = Ложь;
				СтрокаМодуля = Сред(СтрокаМодуля, ПозицияКавычек + 1);
				СтрокаОткрыта = Ложь;
				
				Если НЕ ПустаяСтрока(БлокВКавычках) Тогда 
					
					БлокВКавычкахБуфер = ВРег(БлокВКавычках);
					
					Для Каждого СловоИсключение Из Исключения Цикл
						Если СтрНайти(БлокВКавычкахБуфер, СловоИсключение) > 0 Тогда
							ФлагСловоИсключение = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если НЕ ФлагСловоИсключение Тогда
						
						БлокВКавычкахБуфер = СокрЛП(БлокВКавычкахБуфер);
						
						Для Каждого ОператорЗапроса Из ОператорыЗапроса Цикл
							
							ПозицияОператора = СтрНайти(БлокВКавычкахБуфер, ОператорЗапроса);
							// Не нашли оператор запроса, пропускаем.
							Если ПозицияОператора = 0 Тогда 
								Продолжить;
							КонецЕсли;
							
							// Нашли, проверяем, что это не единственное слово в строке.
							// Т.о. исключаем строковые идентификаторы, например:
							//   ИначеЕсли Действие = "Поместить" Тогда...
							Если БлокВКавычкахБуфер = ОператорЗапроса Тогда 
								Прервать;
							КонецЕсли;
							
							ТекстДоСимвола = Лев(БлокВКавычкахБуфер, ПозицияОператора);
							НомерСтроки = СтрЧислоСтрок(ТекстДоСимвола);
							
							СтрокаБлокаВКавычкахБуфер = СтрПолучитьСтроку(БлокВКавычкахБуфер, НомерСтроки);
							
							СтрокаБлокаВКавычкахБуфер = СтрЗаменить(СтрокаБлокаВКавычкахБуфер, "|", "");
							СтрокаБлокаВКавычкахБуфер = СокрЛ(СтрокаБлокаВКавычкахБуфер);
							
							// Проверяем, что это первое слово в строке.
							Если СтрНайти(СтрокаБлокаВКавычкахБуфер, ОператорЗапроса) = 1 Тогда 
								ФлагЗапрос = Истина;
								Прервать;
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				СтрокаМодуляДоКавычек = Сред(СтрокаМодуля, 1, ПозицияКавычек - 1);
				
				Если ПредыдущаяПозицияКавычек = 0 И СтрНайти(СтрокаМодуляДоКавычек, "|") > 0 Тогда
					
					СтрокаМодуля = Сред(СтрокаМодуля, ПозицияКавычек + 1);
					
				Иначе
					// Позиция кавычек начинают строку.
					СтрокаОткрыта = Истина;
					СтрокаМодуля = Сред(СтрокаМодуля, ПозицияКавычек + 1);
					ПозицияНачалаБлока = Счетчик;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ПредыдущаяПозицияКавычек = ПозицияКавычек;
			
			Если ФлагЗапрос И НЕ СтрокаОткрыта Тогда
				 
				Для НомерСтроки = 1 По СтрЧислоСтрок(БлокВКавычках) Цикл
					
					СтрокаБлока = СтрПолучитьСтроку(БлокВКавычках, НомерСтроки);
					
					// Проверяем правильное использование каждого ключевого слова.
					Для Каждого ЭлементТаблицы Из КлючевыеСлова Цикл
						
						Эталон = ЭлементТаблицы.Наименование;
						ВСтрокаБлока = " " + ВРег(СтрокаБлока) + " ";
						ВСтрокаБлока = СтрЗаменить(ВСтрокаБлока, ";", " ");
						ВСтрокаБлока = СтрЗаменить(ВСтрокаБлока, """", " ");
						ВСтрокаБлока = СтрЗаменить(ВСтрокаБлока, Символы.Таб, " ");
						ВСтрокаБлока = СтрЗаменить(ВСтрокаБлока, "|", " ");
						ВЭталон = " " + ВРег(Эталон) + " ";
						ДлинаВЭталона = СтрДлина(ВЭталон);
						Позиция = СтрНайти(ВСтрокаБлока, ВЭталон);
						
						ИсходнаяСтрокаМодуля = ДокументТекст.ПолучитьСтроку((ПозицияНачалаБлока + НомерСтроки) - 1);
						ИзмененнаяСтрокаМодуля = ИсходнаяСтрокаМодуля;
						ВИзмененнаяСтрокаМодуля = " " + ВРег(ИзмененнаяСтрокаМодуля) + " ";
						ВИзмененнаяСтрокаМодуля = СтрЗаменить(ВИзмененнаяСтрокаМодуля, ";", " ");
						ВИзмененнаяСтрокаМодуля = СтрЗаменить(ВИзмененнаяСтрокаМодуля, """", " ");
						ВИзмененнаяСтрокаМодуля = СтрЗаменить(ВИзмененнаяСтрокаМодуля, Символы.Таб, " ");
						ВИзмененнаяСтрокаМодуля = СтрЗаменить(ВИзмененнаяСтрокаМодуля, "|", " ");
						
						Смещение = 0;
						КонтрСмещение = -1;
						ПозицияНачалоСтрокиПослеЭталона = 0;
						СмещениеВИсходной = 1;
						СмещениеВНаписании = 0;
						
						// Нашли ключевое слово, проверяем каноническое написание.
						Пока Позиция > 0 Цикл
							
							Написание = СокрЛП(Сред(СтрокаБлока, Смещение + Позиция + СмещениеВНаписании, СтрДлина(Эталон)));
							Если Эталоны.Найти(Написание) = Неопределено Тогда
								// Ключевое слово написано не канонически.
								
								ПозицияВИсходнойСтроке = СтрНайти(ВИзмененнаяСтрокаМодуля, ВЭталон);
								
								Если ПозицияВИсходнойСтроке <= 0 Тогда
									Прервать;
								КонецЕсли;
								
								НачальнаяПозиция = СтрНайти(ИсходнаяСтрокаМодуля, ИзмененнаяСтрокаМодуля) - 1;
								
								ПозицияВИсходнойСтроке = НачальнаяПозиция + ПозицияВИсходнойСтроке - СмещениеВИсходной;
								ИсходнаяСтрокаМодуля = Лев(ИсходнаяСтрокаМодуля, ПозицияВИсходнойСтроке) + ВРег(Эталон) 
									+ Сред(ИсходнаяСтрокаМодуля, ПозицияВИсходнойСтроке + ДлинаВЭталона - 1);
								ДокументТекст.ЗаменитьСтроку(ПозицияНачалаБлока + (НомерСтроки - 1), ИсходнаяСтрокаМодуля);
								ФайлИзменен = Истина;
								
								ПозицияНачалоСтрокиПослеЭталона = (ПозицияВИсходнойСтроке - ПозицияНачалоСтрокиПослеЭталона) 
									+ СтрДлина(Эталон);
								ИзмененнаяСтрокаМодуля = Сред(ИзмененнаяСтрокаМодуля, ПозицияНачалоСтрокиПослеЭталона + 1);
								ВИзмененнаяСтрокаМодуля = Сред(ВИзмененнаяСтрокаМодуля, ПозицияНачалоСтрокиПослеЭталона 
									+ СмещениеВИсходной + 1);
								СмещениеВИсходной = 0;
								
							КонецЕсли;
							
							Смещение = Смещение + Позиция + ДлинаВЭталона + КонтрСмещение;
							ВСтрокаБлока = Сред(ВСтрокаБлока, Позиция + ДлинаВЭталона + КонтрСмещение);
							СмещениеВНаписании = СмещениеВНаписании - 1;
							Позиция = СтрНайти(ВСтрокаБлока, ВЭталон);
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
				
				ФлагЗапрос = Ложь;
				БлокВКавычках = "";
				ПозицияНачалаБлока = "";
			КонецЕсли;
			ПозицияКавычек = СтрНайти(СтрокаМодуля, """");
			ПереносСтроки = Ложь;
		КонецЦикла;
		
		// Если строка не содержит кавычек и она открыта, то добавляем ее к блоку в кавычках целиком.
		Если ПредыдущаяПозицияКавычек = 0 И СтрокаОткрыта Тогда 
			БлокВКавычках = БлокВКавычках + Символы.ПС + СтрокаМодуля;
			Продолжить;
		КонецЕсли;
		
		// Если строка открыта, но содержит кавычки, заполняем блок в кавычках текстом после открывающих кавычек.
		Если СтрокаОткрыта Тогда
			БлокВКавычках = СтрокаМодуля;
			Продолжить;
		КонецЕсли;
		
		// Если строка закрыта, очищаем блок в кавычках.
		Если НЕ СтрокаОткрыта Тогда
			БлокВКавычках = "";
		КонецЕсли;
		
		ПредыдущаяПозицияКавычек = 0;
	КонецЦикла;
	
	Возврат ФайлИзменен;
	
КонецФункции

Функция ПроверкаКаноническогоНаписанияКлючевыхСлов(ДокументТекст)
	
	 // Составляем набор эталонов.
	Эталоны = Новый Массив;
	Эталоны.Добавить("Если");
	Эталоны.Добавить("Тогда");
	Эталоны.Добавить("Иначе");
	Эталоны.Добавить("ИначеЕсли");
	Эталоны.Добавить("КонецЕсли");
	Эталоны.Добавить("Для");
	Эталоны.Добавить("Каждого");
	Эталоны.Добавить("Цикл");
	Эталоны.Добавить("КонецЦикла");
	Эталоны.Добавить("Выполнить");
	Эталоны.Добавить("По");
	Эталоны.Добавить("Прервать");
	Эталоны.Добавить("Продолжить");
	Эталоны.Добавить("Из");
	Эталоны.Добавить("Новый");
	Эталоны.Добавить("Перейти");
	Эталоны.Добавить("Перем");
	Эталоны.Добавить("Пока");
	Эталоны.Добавить("Попытка");
	Эталоны.Добавить("Исключение");
	Эталоны.Добавить("КонецПопытки");
	Эталоны.Добавить("ВызватьИсключение");
	Эталоны.Добавить("Процедура");
	Эталоны.Добавить("КонецПроцедуры");
	Эталоны.Добавить("Функция");
	Эталоны.Добавить("КонецФункции");
	Эталоны.Добавить("Возврат");
	Эталоны.Добавить("ДобавитьОбработчик");
	Эталоны.Добавить("УдалитьОбработчик");
	Эталоны.Добавить("И");
	Эталоны.Добавить("ИЛИ");
	Эталоны.Добавить("НЕ");
	Эталоны.Добавить("Или");
	Эталоны.Добавить("Не");
	Эталоны.Добавить("каждого");
	
	КлючевыеСлова = Новый ТаблицаЗначений;
	КлючевыеСлова.Колонки.Добавить("Наименование");
	
	Для Каждого Эталон Из Эталоны Цикл
		СтрокаТаблицы = КлючевыеСлова.Добавить();
		СтрокаТаблицы.Наименование = Эталон;
	КонецЦикла;
	
	КлючевыеСлова.Свернуть("Наименование");
	
	ФайлИзменен = Ложь;
	Буфер = ДокументТекст.ПолучитьТекст();
	// Удаляем из модуля двойные кавычки.
	Буфер = СтрЗаменить(Буфер, """""", "<<ДВОЙНЫЕКАВЫЧКИ>>");
	
	// Инициализируем разбор текста модуля.
	ТекстРазбора = Новый ТекстовыйДокумент;
	ТекстРазбора.УстановитьТекст(Буфер);
	ВсегоСтрок = ТекстРазбора.КоличествоСтрок();
	СтрокаОткрыта = Ложь;
	ОбластьОткрыта = Ложь;
	
	// Проверяем каждую строку до начала комментария.
	Для Счетчик = 1 По ВсегоСтрок Цикл
		
		ИсходнаяСтрокаМодуля = ДокументТекст.ПолучитьСтроку(Счетчик);
		ОбластьОткрыта = ИсключениеИспользованияМодальности(ИсходнаяСтрокаМодуля, ОбластьОткрыта);
		
		Если ОбластьОткрыта Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаМодуля = ТекстРазбора.ПолучитьСтроку(Счетчик);
		// Если строка закрыта; пример открытой строки (следующая строка): Запрос = Новый Запрос("
		// |ВЫБРАТЬ
		// ..."
		
		Если НЕ СтрокаОткрыта Тогда
			
			// Например, URLСтрока = "http://downloads.v8.1c.ru/tmplts/ITS/KLADR/"; - не проверяем на комментарий.
			СтрокаМодуля = СтрЗаменить(СтрокаМодуля, "://", "<<ВНЕШНЕЕСОЕДИНЕНИЕ>>");
			ПозицияКомментария = СтрНайти(СтрокаМодуля, "//");
			
			Если ПозицияКомментария > 0 Тогда // Есть комментарий
				ПозицияКавычек = СтрНайти(СтрокаМодуля, """");
				Если ПозицияКавычек = 0 Тогда // Нет кавычек, удаляем комментарий.
					СтрокаМодуля = Лев(СтрокаМодуля, ПозицияКомментария - 1);
				ИначеЕсли ПозицияКавычек > ПозицияКомментария Тогда // Кавычки после комментария, удаляем комментарий.
					СтрокаМодуля = Лев(СтрокаМодуля, ПозицияКомментария - 1);
				Иначе
					КоличествоКавычекДоКомментария = СтрЧислоВхождений(Лев(СтрокаМодуля, ПозицияКомментария), """");
					// Строка открывается и закрывается до комментария, удаляем комментарий.
					Если КоличествоКавычекДоКомментария % 2 = 0 Тогда 
						СтрокаМодуля = Лев(СтрокаМодуля, ПозицияКомментария - 1);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Вырезаем часть строки в кавычках.
		ПоследняяПозиция = 0;
		ПозицияКавычек = СтрНайти(СтрокаМодуля, """");
		
		Пока ПозицияКавычек > 0 Цикл
			
			Если СтрокаОткрыта Тогда
				// Кавычки закрывают строку, вырезаем часть в кавычках.
				СтрокаМодуляВКавычках = Сред(СтрокаМодуля, ПозицияКавычек + 1);
				СтрокаМодуля = Лев(СтрокаМодуля, ПоследняяПозиция - 1) + СтрокаМодуляВКавычках;
				СтрокаОткрыта = Ложь;
				ПоследняяПозиция = 0;
			Иначе
				// Позиция кавычек начинают строку.
				ПоследняяПозиция = ПозицияКавычек;
				СтрокаОткрыта = Истина;
				СтрокаМодуля = Лев(СтрокаМодуля, ПозицияКавычек - 1) + " " + Сред(СтрокаМодуля, ПозицияКавычек + 1);
			КонецЕсли;
			
			ПозицияКавычек = СтрНайти(СтрокаМодуля, """");
			
		КонецЦикла;
		
		Если СтрокаОткрыта И ПозицияКавычек = 0 Тогда // Строка не закрыта и кавычек в ней нет, не проверяем строку.
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаМодуля) Тогда // Строка пустая
			Продолжить;
		КонецЕсли;
		
		// Проверяем правильное использование каждого ключевого слова.
		Для Каждого ЭлементТаблицы Из КлючевыеСлова Цикл
			
			Эталон = ЭлементТаблицы.Наименование;
			ВСтрокаМодуля = " " + ВРег(СтрокаМодуля) + " ";
			ВСтрокаМодуля = СтрЗаменить(ВСтрокаМодуля, ";", " ");
			ВСтрокаМодуля = СтрЗаменить(ВСтрокаМодуля, Символы.Таб, " ");
			ВЭталон = " " + ВРег(Эталон) + " ";
			ДлинаВЭталона = СтрДлина(ВЭталон);
			Позиция = СтрНайти(ВСтрокаМодуля, ВЭталон);
			ИзмененнаяСтрокаМодуля = ИсходнаяСтрокаМодуля;
			ПозицияНачалоСтрокиПослеЭталона = 0;
			Смещение = 0;
			КонтрСмещение = -1;
			
			// Нашли ключевое слово, проверяем каноническое написание.
			Пока Позиция > 0 Цикл
				
				Написание = СокрЛП(Сред(СтрокаМодуля, Смещение + Позиция + КонтрСмещение, СтрДлина(Эталон) 
					+ ?(Смещение + Позиция + КонтрСмещение = 0, 0, 1)));
				
				Если Эталоны.Найти(Написание) = Неопределено Тогда
					
					// Ключевое слово написано не канонически.
					ПозицияВИсходнойСтроке = СтрНайти(ВРег(СтрЗаменить(ИзмененнаяСтрокаМодуля, Символы.Таб, " ")), ВЭталон);
					
					Если ПозицияВИсходнойСтроке = 0 Тогда
						ПозицияВИсходнойСтроке = СтрНайти(ВРег(ИзмененнаяСтрокаМодуля), " " + ВРег(Эталон));
					КонецЕсли;
					
					Если ПозицияВИсходнойСтроке = 0 Тогда
						ПозицияВИсходнойСтроке = СтрНайти(ВРег(ИзмененнаяСтрокаМодуля), ВРег(Эталон)+ " ") - 1;
					КонецЕсли;
					
					Если ПозицияВИсходнойСтроке = 0 ИЛИ ПозицияВИсходнойСтроке = -1 Тогда
						ПозицияВИсходнойСтроке = СтрНайти(ВРег(ИзмененнаяСтрокаМодуля), ВРег(Эталон)) - 1;
					КонецЕсли;
					
					НачальнаяПозиция = СтрНайти(ИсходнаяСтрокаМодуля, ИзмененнаяСтрокаМодуля) - 1;
					ПозицияВИсходнойСтроке = ПозицияВИсходнойСтроке + НачальнаяПозиция;
					
					ИсходнаяСтрокаМодуля = Лев(ИсходнаяСтрокаМодуля, ПозицияВИсходнойСтроке) + Эталон 
						+ Сред(ИсходнаяСтрокаМодуля, ПозицияВИсходнойСтроке + ДлинаВЭталона - 1);
					ДокументТекст.ЗаменитьСтроку(Счетчик, ИсходнаяСтрокаМодуля);
					ФайлИзменен = Истина;
					ПозицияНачалоСтрокиПослеЭталона = (ПозицияВИсходнойСтроке - ПозицияНачалоСтрокиПослеЭталона) + СтрДлина(Эталон);
					ИзмененнаяСтрокаМодуля = Сред(ИзмененнаяСтрокаМодуля, ПозицияНачалоСтрокиПослеЭталона + 1);
					
				КонецЕсли;
				
				Смещение = Смещение + Позиция + ДлинаВЭталона + КонтрСмещение;
				КонтрСмещение = -1;
				ВСтрокаМодуля = Сред(ВСтрокаМодуля, Позиция + ДлинаВЭталона);
				Позиция = СтрНайти(ВСтрокаМодуля, ВЭталон);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ФайлИзменен;
	
КонецФункции

Функция ПроверкаКомментариевНаДопустимуюДлину(ДокументТекст)
	
	ФайлИзменен = Ложь;
	НомерСтроки = 0;
	
	Пока НомерСтроки < ДокументТекст.КоличествоСтрок() Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		СтрокаМодуляИсходная = ДокументТекст.ПолучитьСтроку(НомерСтроки);
		
		СтрокаМодуля = СтрокаМодуляИсходная;
		Если ПустаяСтрока(СтрокаМодуля) Тогда 
			Продолжить;
		КонецЕсли;
		
		СтрокаМодуля = СокрП(СтрокаМодуля);
		ДлинаСтроки = СтрДлина(СтрокаМодуля);
		// Пропускаем строки менее 120 символов.
		Если ДлинаСтроки <= КоличествоСимволовДляПереносаКомментария Тогда 
			Продолжить;
		КонецЕсли;
		
		Комментарий = ПолучитьКомментарийИзСтроки(СтрокаМодуля, Ложь);
		Комментарий = СокрП(Комментарий);
		
		// Пропускаем строки, не содержащие комментарий.
		Если ПустаяСтрока(Комментарий) Тогда
			Продолжить;
		КонецЕсли;
		
		// Пропускаем строки, содержащие таб.
		Если СтрНайти(Комментарий, Символы.Таб) > 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		// Пропускаем строки с гиперссылками.
		Если СтрНайти(Комментарий, "{http://") > 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		// Пропускаем комментарии, не содержащие ни одного пробела после 120 символов.
		Если СтрНайти(Сред(Комментарий, 121), " ") = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		// Получаем номер первого символа отличного от "/".
		КомментарийСокрЛ = СокрЛ(Комментарий);
		ДлинаКомментарияСокрЛ = СтрДлина(КомментарийСокрЛ);
		Для НомерСимвола = 3 По ДлинаКомментарияСокрЛ + 1 Цикл 
			Символ = Сред(КомментарийСокрЛ, НомерСимвола, 1);
			Если Символ <> "/" Тогда 
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Получаем комментарий без первых знаков комментария.
		КомментарийБезЗнаковКомментария = Сред(КомментарийСокрЛ, НомерСимвола);
		
		// В строке только знаки комментария, пропускаем.
		Если ПустаяСтрока(КомментарийБезЗнаковКомментария) Тогда 
			Продолжить;
		КонецЕсли;
		КомментарийБезЗнаковКомментария = СокрЛ(КомментарийБезЗнаковКомментария);
		
		// Если комментарий начинается со слов "процедура" или "функция" и содержит скобку "(", 
		// то считаем его кодом, пропускаем.
		Если (СтрНайти(КомментарийБезЗнаковКомментария, "(") > 0)
		   И ((ВРег(Лев(КомментарийБезЗнаковКомментария, СтрДлина("Процедура"))) = ВРег("Процедура"))
		  ИЛИ (ВРег(Лев(КомментарийБезЗнаковКомментария, СтрДлина("Функция"))) = ВРег("Функция"))) Тогда
			Продолжить;
		КонецЕсли;
		
		// Получим отступ до знака комментария.
		ОтступДоЗнакаКомментария = ПолучитьОтступДоЗнакаКомментария(СтрокаМодуля);
		
		// Если отступ до знака комментария не пустой (комментарий написан в строке кода), 
		// то такие строки пропускаем, т.к. не понятно, как делать перенос.
		Если НЕ ПустаяСтрока(ОтступДоЗнакаКомментария) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Получим отступ после знака комментария.
		ОтступПослеЗнакаКомментария = ПолучитьОтступПослеЗнакаКомментария(Комментарий);
		
		// Если отступ после знака комментария отсутствует, и строка заканчивается на ";", считаем, что это код.
		Если (ОтступПослеЗнакаКомментария = "") И (Прав(СтрокаМодуля, 1) = ";") Тогда 
			Продолжить;
		КонецЕсли;
		
		ДлинаОтступаПослеЗнакаКомментария = СтрДлина(ОтступПослеЗнакаКомментария);
		
		// Получим, что необходимо оставить в той же строке, а что перенести.
		НомерСимволаДляПереноса = 0;
		// 121-м символом может быть пробел, тогда на нем и надо перенести.
		Для НомерСимволаСКонца = 1 По КоличествоСимволовДляПереносаКомментария + 1 Цикл
			НомерСимвола = КоличествоСимволовДляПереносаКомментария + 1 - НомерСимволаСКонца + 1;
			Символ = Сред(СтрокаМодуля, НомерСимвола, 1);
			Если Символ = " " Тогда 
				НомерСимволаДляПереноса = НомерСимвола;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ТекущаяСтрока = Лев(СтрокаМодуля, НомерСимволаДляПереноса - 1);
		ПереносимаяСтрока = Сред(СтрокаМодуля, НомерСимволаДляПереноса + 1);
		
		// Если в текущей строке нет значимых символов, то пропускаем.
		Если ПустаяСтрока(СтрЗаменить(ТекущаяСтрока, "/", "")) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Если в текущей строке нет определения параметра, то следующую строку сдвигаем с тем же отступом.
		Если НЕ КомментарийСодержитОписаниеПараметра(КомментарийБезЗнаковКомментария) Тогда 
			
			НовыйОтступ = ОтступДоЗнакаКомментария + "//" + ОтступПослеЗнакаКомментария;
			НоваяСтрока = НовыйОтступ + ПереносимаяСтрока;
			
			ДокументТекст.ЗаменитьСтроку(НомерСтроки, ТекущаяСтрока);
			ДокументТекст.ВставитьСтроку(НомерСтроки + 1, НоваяСтрока);
			
			ОбъединитьКомментарииСтрок(ДокументТекст, НомерСтроки + 1);
			
			ФайлИзменен = Истина;
			
			Продолжить;
			
		КонецЕсли;
		
		// Если в текущей строке есть описание параметра, проверим отступ в следующей строке.
		СледующаяСтрока = ДокументТекст.ПолучитьСтроку(НомерСтроки + 1);
		
		// Если в следующей строке нет табов, то проверяем ее отступ.
		Если СтрНайти(СледующаяСтрока, Символы.Таб) = 0 Тогда 
			
			ОтступКомментарияСледующейСтроки = ПолучитьОтступПослеЗнакаКомментария(СледующаяСтрока);
			ДлинаОтступаКомментарияСледующейСтроки = СтрДлина(ОтступКомментарияСледующейСтроки);
			
			// Если в следующей строке после определения параметра есть большой отступ,
			Если ДлинаОтступаКомментарияСледующейСтроки > ДлинаОтступаПослеЗнакаКомментария Тогда 
				// тогда сдвигаем новую строку на этот отступ.
				НовыйОтступ = ОтступДоЗнакаКомментария + "//" + ОтступКомментарияСледующейСтроки;
				НоваяСтрока = НовыйОтступ + ПереносимаяСтрока;
				
				ДокументТекст.ЗаменитьСтроку(НомерСтроки, ТекущаяСтрока);
				ДокументТекст.ВставитьСтроку(НомерСтроки + 1, НоваяСтрока);
				
				ОбъединитьКомментарииСтрок(ДокументТекст, НомерСтроки + 1);
				
				ФайлИзменен = Истина;
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Если в следующей строке отступ такой же или меньше, то определяем новый отступ.
		// Для этого определяем, сколько тире в текущей строке, которая уже меньше 120 символов.
		КоличествоТире = СтрЧислоВхождений(ТекущаяСтрока, " - ");
		Если КоличествоТире = 0 Тогда 
			// Если тире нет, то переносим с таким отступом + 4 пробела.
			НовыйОтступ = ОтступДоЗнакаКомментария + "//" + ОтступДоЗнакаКомментария + "    ";
			НоваяСтрока = НовыйОтступ + ПереносимаяСтрока;
			
			ДокументТекст.ЗаменитьСтроку(НомерСтроки, ТекущаяСтрока);
			ДокументТекст.ВставитьСтроку(НомерСтроки + 1, НоваяСтрока);
			
			ОбъединитьКомментарииСтрок(ДокументТекст, НомерСтроки + 1);
			
			ФайлИзменен = Истина;
			
			Продолжить;
			
		КонецЕсли;
		
		// Тире есть, определяем позицию тире:
		// если тире одно, то его позицию; если их больше, то позицию второго тире.
		Если КоличествоТире = 1 Тогда 
			ПозицияТире = СтрНайти(ТекущаяСтрока, " - ");
		Иначе
			ПозицияТире = СтрНайти(ТекущаяСтрока, " - ");
			ТекущаяСтрокаВтороеТире = Сред(ТекущаяСтрока, ПозицияТире + 3);
			
			СтрокаДоТире = Лев(ТекущаяСтрока, ПозицияТире);
			СтрокаДоТире = СтрЗаменить(СтрокаДоТире, "/", "");
			
			ПозицияТире = ПозицияТире + СтрНайти(ТекущаяСтрокаВтороеТире, " - ") + 2;
			
			// Иногда описание параметра начинается с тире, тогда надо определять позицию 3-го тире.
			Если (КоличествоТире >= 3) И (ПустаяСтрока(СтрокаДоТире)) Тогда 
				ТекущаяСтрокаТретьеТире = Сред(ТекущаяСтрока, ПозицияТире + 3);
				ПозицияТире = ПозицияТире + СтрНайти(ТекущаяСтрокаТретьеТире, " - ") + 2;
			КонецЕсли;
		КонецЕсли;
		
		// Определяем номер значимого символа после тире.
		ДлинаСтроки = СтрДлина(ТекущаяСтрока);
		Для НомерСимвола = ПозицияТире + 3 По ДлинаСтроки Цикл 
			Символ = Сред(ТекущаяСтрока, НомерСимвола, 1);
			Если Символ <> " " Тогда 
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Подготовим новый отступ - заменим все символы, кроме "/" на пробелы.
		НовыйОтступ = "";
		СимволыБезЗамены = " /" + Символы.Таб;
		Для Счетчик = 1 По НомерСимвола - 1 Цикл 
			Символ = Сред(ТекущаяСтрока, Счетчик, 1);
			Если СтрНайти(СимволыБезЗамены, Символ) > 0 Тогда 
				НовыйОтступ = НовыйОтступ + Символ;
			Иначе
				НовыйОтступ = НовыйОтступ + " ";
			КонецЕсли;
		КонецЦикла;
		
		// Если переносимый текст полностью укладывается в 120 символов (без еще одного переноса), то переносим по тире.
		Если СтрДлина(НовыйОтступ) + СтрДлина(ПереносимаяСтрока) <= КоличествоСимволовДляПереносаКомментария Тогда 
			НоваяСтрока = НовыйОтступ + ПереносимаяСтрока;
		Иначе
			// Если не укладывается, то новый отступ = текущему + 4 пробела слева.
			НовыйОтступ = ОтступДоЗнакаКомментария + "//" + ОтступПослеЗнакаКомментария + "    ";
			НоваяСтрока = НовыйОтступ + ПереносимаяСтрока;
		КонецЕсли;
		
		ДокументТекст.ЗаменитьСтроку(НомерСтроки, ТекущаяСтрока);
		ДокументТекст.ВставитьСтроку(НомерСтроки + 1, НоваяСтрока);
		
		ОбъединитьКомментарииСтрок(ДокументТекст, НомерСтроки + 1);
		
		ФайлИзменен = Истина;
		
	КонецЦикла;
	
	Возврат ФайлИзменен;
	
КонецФункции

Функция ПроверкаОператоровСКрайнейЛевойПозиции(ДокументТекст)
	
	ФайлИзменен = Ложь;
	
	МассивОператоров = Новый Массив;
	МассивОператоров.Добавить(ВРег("КонецПроцедуры"));
	МассивОператоров.Добавить(ВРег("КонецФункции"));
	МассивОператоров.Добавить(ВРег("Процедура"));
	МассивОператоров.Добавить(ВРег("Функция"));
	
	МассивДирективИнструкций = Новый Массив;
	МассивДирективИнструкций.Добавить("#");
	МассивДирективИнструкций.Добавить("&");
	
	ТекстПерем = ВРег("Перем");
	ТекстКонецОбласти = ВРег("КонецОбласти");
	
	ЗакончилсяБлокПеременных = Ложь;
	КоличествоСтрок = ДокументТекст.КоличествоСтрок();
	ПозицияНеВнутриМетода = Истина;
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		СтрокаМодуляИсходная = ДокументТекст.ПолучитьСтроку(НомерСтроки);
		
		// Пропускаем пустые строки.
		Если ПустаяСтрока(СтрокаМодуляИсходная) Тогда
			Продолжить;
		КонецЕсли;
		
		// Пропускаем комментарии.
		СтрокаМодуля = СокрЛП(СтрокаМодуляИсходная);
		Если Лев(СтрокаМодуля, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверяем операторы "Процедура", "КонецПроцедуры", "Функция", "КонецФункции".
		СтрокаМодуля = ВРег(СтрокаМодуляИсходная);
		УбратьСимволыВНачалеСтроки = Ложь;
		ВхождениеНайдено = Ложь;
		
		Для Каждого ТекущийОператор Из МассивОператоров Цикл
			
			ПозицияОператора = СтрНайти(СтрокаМодуля, ТекущийОператор);
			
			// Если текста оператора нет в строке, пропускаем.
			Если ПозицияОператора = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ФлагКонецМетода = (Лев(ТекущийОператор, 5) = "КОНЕЦ");
			
			// Проверяем первый символ после текста оператора.
			СимволПослеОператора = Сред(СтрокаМодуля, ПозицияОператора + СтрДлина(ТекущийОператор), 1);
			
			// Если строка не пустая, то это вхождение текста не является оператором.
			// Для операторов "КонецФункции" и "КонецПроцедуры" следующим символом может быть ";".
			Если ФлагКонецМетода Тогда
				Если НЕ ПустаяСтрока(СимволПослеОператора) И СимволПослеОператора <> ";" Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Если НЕ ПустаяСтрока(СимволПослеОператора) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Проверяем строку перед текстом оператора.
			СтрокаДо = Лев(СтрокаМодуля, ПозицияОператора - 1);
			
			// Если строка не пустая, то это вхождение текста не является оператором.
			Если НЕ ПустаяСтрока(СтрокаДо) Тогда
				Продолжить;
			КонецЕсли;
			
			
			// Если строка начинается с оператора, сдвигать влево не нужно.
			Если ПозицияОператора > 1 Тогда
				УбратьСимволыВНачалеСтроки = Истина;
			КонецЕсли;
			
			// Проставляем флаг того, что мы находимся внутри функции для корректного сдвига областей.
			Если ФлагКонецМетода Тогда
				ПозицияНеВнутриМетода = Истина;
			Иначе
				ПозицияНеВнутриМетода = Ложь;
			КонецЕсли;
			
			ЗакончилсяБлокПеременных = Истина;
			ВхождениеНайдено = Истина;
			Прервать;
			
		КонецЦикла;
		
		Если УбратьСимволыВНачалеСтроки Тогда
			НоваяСтрока = СокрЛ(СтрокаМодуляИсходная);
			ДокументТекст.ЗаменитьСтроку(НомерСтроки, НоваяСтрока);
			ФайлИзменен = Истина;
			Продолжить;
		КонецЕсли;
		
		Если ВхождениеНайдено Тогда
			Продолжить;
		КонецЕсли;
		
		
		// Проверяем объявление переменных модуля Перем.
		Если НЕ ЗакончилсяБлокПеременных Тогда
			
			УбратьСимволыВНачалеСтроки = Ложь;
			ВхождениеНайдено = Ложь;
			
			ПозицияОператора = СтрНайти(СтрокаМодуля, ТекстПерем);
			
			Если ПозицияОператора = 1 Тогда
				
				// Если строка начинается с оператора Перем, ничего менять не нужно.
				ВхождениеНайдено = Истина;
				
			ИначеЕсли ПозицияОператора > 1 Тогда
				
				// Проверяем строку перед текстом оператора и символ после.
				СтрокаДо = Лев(СтрокаМодуля, ПозицияОператора - 1);
				СимволПослеОператора = Сред(СтрокаМодуля, ПозицияОператора + СтрДлина(ТекстПерем), 1);
				
				// Если строка до текста оператора пустая и первый символ после него незначащий, то это вхождение оператора.
				Если ПустаяСтрока(СтрокаДо) Тогда
					ВхождениеНайдено = Истина;
					Если ПустаяСтрока(СимволПослеОператора) Тогда
						УбратьСимволыВНачалеСтроки = Истина;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если УбратьСимволыВНачалеСтроки Тогда
				НоваяСтрока = СокрЛ(СтрокаМодуляИсходная);
				ДокументТекст.ЗаменитьСтроку(НомерСтроки, НоваяСтрока);
				ФайлИзменен = Истина;
				Продолжить;
			КонецЕсли;
			
			Если ВхождениеНайдено Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		
		// Проверяем директивы компилятора (&НаКлиенте, &НаСервере и т.д.)
		// и инструкции препроцессора (#Область, #КонецОбласти).
		ИзмененнаяСтрока = СтрокаМодуляИсходная;
		СтрокаИзменена = Ложь;
		
		Для Каждого ТекущийСимвол Из МассивДирективИнструкций Цикл
			
			ПозицияСимвола = СтрНайти(СтрокаМодуля, ТекущийСимвол);
			
			// Если символа нет в строке, пропускаем.
			Если ПозицияСимвола = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Проверяем строку перед текстом оператора.
			СтрокаДо = Лев(СтрокаМодуля, ПозицияСимвола - 1);
			// Если строка не пустая, то это вхождение текста не является директивой или инструкцией.
			Если НЕ ПустаяСтрока(СтрокаДо) Тогда
				Продолжить;
			КонецЕсли;
			
			// Проверяем незначащие символы после искомого текста.
			ПозицияТекущегоСимвола = ПозицияСимвола + 1;
			НуженСдвигВлево = Ложь;
			
			Пока Истина Цикл
				
				// Если дошли до конца строки, выходим из цикла.
				Если ПозицияТекущегоСимвола > СтрДлина(СтрокаМодуля) Тогда
					Прервать;
				КонецЕсли;
				
				СимволВСтроке = Сред(СтрокаМодуля, ПозицияТекущегоСимвола, 1);
				ПозицияТекущегоСимвола = ПозицияТекущегоСимвола + 1;
				
				// Если встретили значащий символ или дошли до конца строки, прерываем цикл.
				Если НЕ ПустаяСтрока(СимволВСтроке) Тогда
					Прервать;
				КонецЕсли;
				
				ИзмененнаяСтрока = СтрокаДо + ТекущийСимвол + Прав(ИзмененнаяСтрока, СтрДлина(ИзмененнаяСтрока) - 2 - СтрДлина(СтрокаДо));
				
				СтрокаИзменена = Истина;
				
			КонецЦикла;
			
			// Убираем незначащие символы слева, если это необходимо.
			Если ПозицияСимвола > 1 Тогда
				
				Если ТекущийСимвол = "#" Тогда
					
					НуженСдвигВлево = ПозицияНеВнутриМетода;
					
				ИначеЕсли ТекущийСимвол = "&" Тогда
					
					НуженСдвигВлево = Истина;
					
				КонецЕсли;
				
				Если НуженСдвигВлево Тогда
					ИзмененнаяСтрока = СокрЛ(ИзмененнаяСтрока);
					СтрокаИзменена = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаИзменена Тогда
			ДокументТекст.ЗаменитьСтроку(НомерСтроки, ИзмененнаяСтрока);
			ФайлИзменен = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ФайлИзменен;
	
КонецФункции

// Функция получает комментарий из строки.
// Например, строка <Строка; // Комментарий>:
//  Ложь - с символом комментария <// Комментарий>
//  Истина - без символа комментария <Комментарий>.
Функция ПолучитьКомментарийИзСтроки(СтрокаМодуля, БезСимволаКомментария = Истина) 
	
	// Например, URLСтрока = "http://downloads.v8.1c.ru/tmplts/ITS/KLADR/"; - не проверяем на комментарий.
	СтрокаСКомментарием = СтрЗаменить(СтрокаМодуля, "://", "<<ВНЕШНЕЕСОЕДИНЕНИЕ>>");
	СтрокаКомментария = "";
	ПозицияКомментария = СтрНайти(СтрокаСКомментарием, "//");
	
	// есть комментарий
	Если ПозицияКомментария = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ПозицияКавычек = СтрНайти(СтрокаСКомментарием, """");
	// Проверяем есть ли вначале строки символ "|".
	ПервыйСимвол = Сред(СокрЛП(СтрокаСКомментарием), 1, 1);
	
	// Нет кавычек, оставляем весь комментарий.
	// Кавычки после комментария, оставляем весь комментарий.
	Если (ПозицияКавычек = 0 ИЛИ ПозицияКавычек > ПозицияКомментария) И ПервыйСимвол <> "|" Тогда
		
		Если БезСимволаКомментария Тогда
			СтрокаКомментария = Сред(СтрокаСКомментарием, ПозицияКомментария + 2);
		Иначе
			СтрокаКомментария = Сред(СтрокаСКомментарием, ПозицияКомментария);
		КонецЕсли;
		
	ИначеЕсли ПервыйСимвол = "|" Тогда
		
		КоличествоКавычекДоКомментария = СтрЧислоВхождений(Лев(СтрокаСКомментарием, ПозицияКомментария), """");
		
		// Строка открывается и закрывается до комментария, оставляем весь комментарий.
		Если КоличествоКавычекДоКомментария % 2 <> 0 Тогда
			Если БезСимволаКомментария Тогда
				СтрокаКомментария = Сред(СтрокаСКомментарием, ПозицияКомментария + 2);
			Иначе
				СтрокаКомментария = Сред(СтрокаСКомментарием, ПозицияКомментария);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		КоличествоКавычекДоКомментария = СтрЧислоВхождений(Лев(СтрокаСКомментарием, ПозицияКомментария), """");
		
		// Строка открывается и закрывается до комментария, оставляем весь комментарий.
		Если КоличествоКавычекДоКомментария % 2 = 0 Тогда 
			Если БезСимволаКомментария Тогда
				СтрокаКомментария = Сред(СтрокаСКомментарием, ПозицияКомментария + 2);
			Иначе
				СтрокаКомментария = Сред(СтрокаСКомментарием, ПозицияКомментария);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Цикл по символам начиная с ПозицияКомментария, искать первый символ <> "/".
	Если СтрДлина(СтрокаКомментария) <> 1 И БезСимволаКомментария И НЕ ПустаяСтрока(СтрокаКомментария) Тогда
		Для НомерСимвола = 1 По СтрДлина(СтрокаКомментария) Цикл
			ТекущийСимвол = Сред(СтрокаКомментария, НомерСимвола, 1);
			Если (НЕ ПустаяСтрока(СокрЛ(ТекущийСимвол)) И ТекущийСимвол <> "/") ИЛИ НомерСимвола = СтрДлина(СтрокаКомментария) Тогда
				СтрокаКомментария = СокрЛ(Сред(СтрокаКомментария, НомерСимвола));
				Прервать;
			КонецЕсли
		КонецЦикла;
	КонецЕсли;
	
	СтрокаСКомментарием = СтрЗаменить(СтрокаКомментария, "<<ВНЕШНЕЕСОЕДИНЕНИЕ>>", "://");
	
	Возврат СтрокаСКомментарием;
	
КонецФункции

Функция ПолучитьОтступДоЗнакаКомментария(Знач СтрокаМодуля)
	
	ПозицияКомментария = СтрНайти(СтрокаМодуля, "//");
	ОтступДоЗнакаКомментария = Лев(СтрокаМодуля, ПозицияКомментария - 1);
	
	Возврат ОтступДоЗнакаКомментария;
	
КонецФункции

Функция ПолучитьОтступПослеЗнакаКомментария(Знач СтрокаМодуля)
	
	СтрокаМодуля = СокрЛ(СтрокаМодуля);
	
	Если Лев(СтрокаМодуля, 2) <> "//" Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаМодуля = СтрЗаменить(СтрокаМодуля, "/", "");
	
	Если ПустаяСтрока(СтрокаМодуля) Тогда 
		Возврат "";
	КонецЕсли;
	
	СтрокаМодуляСокрЛ = СокрЛ(СтрокаМодуля);
	ДлинаОтступа = СтрДлина(СтрокаМодуля) - СтрДлина(СтрокаМодуляСокрЛ);
	
	Отступ = Сред(СтрокаМодуля, 1, ДлинаОтступа);
	
	Возврат Отступ;
	
КонецФункции

Функция КомментарийСодержитОписаниеПараметра(Знач Комментарий)
	
	Комментарий = ВРег(Комментарий);
	Комментарий = СтрЗаменить(Комментарий, Символы.Таб, " ");
	
	// Иногда в параметре указывают его обязательность, удалим этот текст из комментария.
	Комментарий = СтрЗаменить(Комментарий, ВРег("(обязательный)"), "");
	Комментарий = СтрЗаменить(Комментарий, ВРег("(необязательный)"), "");
	
	// Иногда параметр начинается с тире, поэтому в цикле.
	Пока Истина Цикл 
		
		ПозицияТире = СтрНайти(Комментарий, " - ");
		Если ПозицияТире = 0 Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		// Выделяем наименование параметра до тире.
		Параметр = Лев(Комментарий, ПозицияТире);
		Параметр = СтрЗаменить(Параметр, "/", "");
		// Иногда параметр начинается со звездочки, удаляем.
		Параметр = СтрЗаменить(Параметр, "*", "");
		// Иногда параметр начинается с тире, удаляем.
		Параметр = СтрЗаменить(Параметр, "-", "");
		
		// Если до тире пустая строка, ищем следующее тире.
		Если ПустаяСтрока(Параметр) Тогда 
			Комментарий = Сред(Комментарий, ПозицияТире + 3);
			Продолжить;
		КонецЕсли;
		
		// Удаляем все пробелы вокруг параметра.
		Параметр = СокрЛП(Параметр);
		
		// Если в параметре есть пробелы, то это не параметр.
		Возврат СтрНайти(Параметр, " ") = 0;
		
	КонецЦикла;
	
КонецФункции

// Объединяет комментарий текущей строки с комментарием следующей строки.
// Если результирующий комментарий меньше 120 символов,
// то заменяет текущую строку в документе новой получившейся строкой и удаляет следующую строку из документа.
//
Процедура ОбъединитьКомментарииСтрок(ДокументТекст, НомерСтроки)
	
	СледующаяСтрока = ДокументТекст.ПолучитьСтроку(НомерСтроки + 1);
	
	// В следующей строке нет комментария, не объединяем.
	Если СтрНайти(СледующаяСтрока, "//") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Пустые комментарии не переносим.
	Если СокрЛП(СледующаяСтрока) = "//" Тогда
		Возврат;
	КонецЕсли;
	
	// Комментарий в следующей строке расположен после кода, не объединяем.
	СледующаяСтрокаОтступДоКомментария = ПолучитьОтступДоЗнакаКомментария(СледующаяСтрока);
	Если НЕ ПустаяСтрока(СледующаяСтрокаОтступДоКомментария) Тогда
		Возврат;
	КонецЕсли;
	
	СледующаяСтрокаОтступПослеКомментария = ПолучитьОтступПослеЗнакаКомментария(СледующаяСтрока);
	
	ТекущаяСтрока = ДокументТекст.ПолучитьСтроку(НомерСтроки);
	ТекущаяСтрокаОтступПослеКомментария = ПолучитьОтступПослеЗнакаКомментария(ТекущаяСтрока);
	
	// Если отступ после знака комментария в следующей строке меньше, чем в текущей, не объединяем.
	Если СледующаяСтрокаОтступПослеКомментария < ТекущаяСтрокаОтступПослеКомментария Тогда
		Возврат;
	КонецЕсли;
	
	КомментарийСледующейСтроки = ПолучитьКомментарийИзСтроки(СледующаяСтрока, Истина);
	КомментарийСледующейСтроки = СокрЛП(КомментарийСледующейСтроки);
	
	// Если следующая строка содержит описание параметра, не объединяем.
	Если КомментарийСодержитОписаниеПараметра(КомментарийСледующейСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = СокрП(ТекущаяСтрока) + " " + КомментарийСледующейСтроки;
	
	ДокументТекст.ЗаменитьСтроку(НомерСтроки, НоваяСтрока);
	ДокументТекст.УдалитьСтроку(НомерСтроки + 1);
	
КонецПроцедуры

Функция ИсключениеИспользованияМодальности(Строка, ОбластьОткрыта)
	
	Если НЕ ОбластьОткрыта Тогда
		Возврат СтрНайти(Строка, "ИспользованиеМодальности") > 0;
	Иначе
		Возврат СтрНайти(Строка, "Конец ИспользованиеМодальности") = 0;
	КонецЕсли;
	
КонецФункции

// Возвращает Истину, если слово состоит только из кириллических букв
// иначе (латинские буквы, цифры, любые символы) возвращает Ложь.
Функция апк_СловоСодержитТолькоКириллицу(Слово)
	
	Если Слово = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	РусскийАлфавит = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя";
	ВсегоБукв = СтрДлина(Слово);
	
	Для Счетчик = 1 По ВсегоБукв Цикл 
		
		Буква = НРег(Сред(Слово, Счетчик, 1));
		Если СтрНайти(РусскийАлфавит, Буква) = 0 Тогда 
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Возвращает Истину, если слово состоит только из латинских букв
// иначе (кириллические буквы, цифры, любые символы) возвращает Ложь.
Функция апк_СловоСодержитТолькоЛатиницу(Слово)
	
	Если Слово = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	АнглийскийАлфавитНижнийРегистр = "qwertyuiopasdfghjklzxcvbnm";
	СловоНижнийРегистр = НРег(Слово);
	КоличествоБуквСлова = СтрДлина(Слово);
	
	Для Счетчик = 1 По КоличествоБуквСлова Цикл
		
		БукваНижнегоРегистра = Сред(СловоНижнийРегистр, Счетчик, 1);
		
		Если СтрНайти(АнглийскийАлфавитНижнийРегистр, БукваНижнегоРегистра) = 0 Тогда 
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Возвращает Истину, если переданный параметр - Число.
//
Функция апк_ЭтоЧисло(Строка)
	
	МассивЗнаковИсключений = Новый Массив;
	МассивЗнаковИсключений.Добавить(".");
	МассивЗнаковИсключений.Добавить("+");
	МассивЗнаковИсключений.Добавить("-");
	
	Если МассивЗнаковИсключений.Найти(Строка) <> Неопределено
		ИЛИ Строка = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка 
		Число = Число(Строка);
	Исключение 
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает Истину, если переданная строка содержит описание области, иначе - Ложь.
// Пример: Для строк "СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ", "СтандартныеПодсистемы", "Конец СтандартныеПодсистемы"
// функция возвращает значение Истина.
//
Функция СтрокаСодержитОписаниеОбласти(Строка)
	
	СокрСтрока = СтрЗаменить(Строка, Символы.Таб, " ");
	ПозицияФразы = СтрНайти(ВРег(СокрСтрока), "КОНЕЦ ");
	Если ПозицияФразы > 0 И ПустаяСтрока(Сред(СокрСтрока, 1, ПозицияФразы - 1)) Тогда
		СокрСтрока = Сред(СокрСтрока, ПозицияФразы + 5);
	КонецЕсли;
	
	СтрокаБезПробелов = СтрЗаменить(СокрСтрока, " ", "");
	СтрокаБезПробеловИТочек = СтрЗаменить(СтрокаБезПробелов, ".", "");
	Если НЕ апк_СловоСодержитТолькоКириллицу(СтрокаБезПробеловИТочек) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СокрСтрока = СокрЛП(СокрСтрока);
	
	Если СтрНайти(СокрСтрока, " ") = 0 ИЛИ СтрокаВВерхнемРегистре(СокрСтрока) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает Истину, если в строка представляет из себя закомментированный код
// иначе, (это комментарий) возвращает Ложь.
// На вход подается строка модуля без комментария.
Функция ЭтоКод(Знач СтрокаМодуля)
	
	Если ПустаяСтрока(СтрокаМодуля) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если Лев(СокрЛ(СтрокаМодуля), 1) = "|" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтрНайти(ВРег(СтрокаМодуля), "НСТР(") > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивСимволовКода = Новый Массив;
	МассивСимволовКода.Добавить("<");
	МассивСимволовКода.Добавить(">");
	МассивСимволовКода.Добавить("=");
	
	МассивФразКомментария = Новый Массив;
	МассивФразКомментария.Добавить("ПРИМЕР:");
	МассивФразКомментария.Добавить("НАПРИМЕР,");
	МассивФразКомментария.Добавить("СМ.");
	МассивФразКомментария.Добавить("КАВЫЧКИ.");
	МассивФразКомментария.Добавить(": КАВЫЧКИ");
	МассивФразКомментария.Добавить(".<");
	МассивФразКомментария.Добавить(">.");
	МассивФразКомментария.Добавить("->");
	МассивФразКомментария.Добавить("**");
	МассивФразКомментария.Добавить("{HTTP");
	
	РазделителиСлов = апк_ПолучитьРазделителиСлов();
	СтрокаРазделителейОкончанияСлов = ",.;*/%+-><)(";
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("<xs:");
	МассивИсключений.Добавить("</xs:");
	МассивИсключений.Добавить("<?xml");
	
	ВесКода = 0;
	
	Если Лев(СтрокаМодуля, 1) = " " Тогда
		ВесКода = ВесКода - 3;
	ИначеЕсли Лев(СтрокаМодуля, 1) = Символы.Таб Тогда 
		ВесКода = ВесКода + 3;
	ИначеЕсли Лев(СтрокаМодуля, 1) = "-" Тогда 
		ВесКода = ВесКода - 3;
	Иначе
		ВесКода = ВесКода + 1;
	КонецЕсли;
	
	СтрокиЗапроса = апк_ПолучитьСтрокиТекстаЗапроса();
	Для Каждого СтрокаЗапроса Из СтрокиЗапроса Цикл 
		ПозицияСимволаЗапроса = СтрНайти(СтрокаМодуля, СтрокаЗапроса);
		Если ПозицияСимволаЗапроса = 0 Тогда 
			Продолжить;
		ИначеЕсли ПозицияСимволаЗапроса = 1 Тогда 
			ВесКода = ВесКода + 5;
		Иначе
			ВесКода = ВесКода + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрЧислоВхождений(СтрокаМодуля, """") % 2 <> 0 Тогда
		ВесКода = ВесКода + 3;
	КонецЕсли;
	
	Строка = СтрЗаменить(СтрокаМодуля, Символы.Таб, " ");
	
	// Удаляем все, что находится в кавычках.
	ПозицияКавычки = СтрНайти(Строка, """");
	Пока ПозицияКавычки > 0 Цикл
		ПозицияЗакрывающейКавычки = СтрНайти(Сред(Строка, ПозицияКавычки + 1), """") + ПозицияКавычки;
		Если ПозицияЗакрывающейКавычки = 0 Тогда 
			Прервать;
		КонецЕсли;
		Строка = Лев(Строка, ПозицияКавычки - 1) + "Кавычки" + Сред(Строка, ПозицияЗакрывающейКавычки + 1);
		ПозицияКавычки = СтрНайти(Строка, """");
	КонецЦикла;
	
	МассивСлов = апк_СтрРазделить(Строка, " ", Ложь);
	МассивСловВВерхнем = апк_СтрРазделить(ВРег(Строка), " ", Ложь);
	
	Если МассивСловВВерхнем.Количество() > 1 Тогда
		Если МассивСловВВерхнем[0] = "ДЛЯ" Тогда
			Возврат (МассивСловВВерхнем.Найти("ЦИКЛ") <> Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СимволКода Из МассивИсключений Цикл
		ПозицияИсключения = СтрНайти(ВРег(Строка), ВРег(СимволКода));
		Если ПозицияИсключения > 0 И ПустаяСтрока(Сред(Строка, 1, ПозицияИсключения - 1)) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Счетчик = 0 По МассивСлов.Количество() - 2 Цикл
		
		Если РазделителиСлов[МассивСловВВерхнем[Счетчик]] = Неопределено 
			И РазделителиСлов[МассивСловВВерхнем[Счетчик + 1]] = Неопределено
			И СтрНайти(СтрокаРазделителейОкончанияСлов, Прав(МассивСловВВерхнем[Счетчик], 1)) = 0 Тогда
			
			ВесКода = ВесКода - 3;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаВРег = ВРег(СокрЛП(Строка));
	ТаблицаСлужебныхСлов = ПолучитьТаблицуСлужебныхСлов();
	Для Каждого СтрокаСлужебноеСлово Из ТаблицаСлужебныхСлов Цикл 
		СлужебноеСлово = СтрокаСлужебноеСлово.Имя;
		Если СтрокаСлужебноеСлово.Положение = "Начало" Тогда
			Если Лев(СтрокаВРег, СтрДлина(СлужебноеСлово)) = СлужебноеСлово Тогда
				ВесКода = ВесКода + 5;
			КонецЕсли;
		ИначеЕсли СтрокаСлужебноеСлово.Положение = "Конец" Тогда 
			Если Прав(СтрокаВРег, СтрДлина(СлужебноеСлово)) = СлужебноеСлово Тогда
				ВесКода = ВесКода + 5;
			КонецЕсли;
		ИначеЕсли СтрокаСлужебноеСлово.Положение = "Строка" Тогда 
			Если СтрокаВРег = СлужебноеСлово Тогда
				ВесКода = ВесКода + 5;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСлов.Количество() = 1 И ВесКода < 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВсеСловаСЗаглавнойБуквы = Истина;
	Для Каждого Слово Из МассивСлов Цикл
		
		Слово = СокрЛП(Слово);
		ПервыйСимвол = Лев(Слово, 1);
		
		Если ПервыйСимвол = "&" Тогда 
			ВесКода = ВесКода + 1;
		ИначеЕсли НЕ (СтрокаВВерхнемРегистре(ПервыйСимвол) И НЕ СтрокаВВерхнемРегистре(Слово)) 
			И (апк_СловоСодержитТолькоЛатиницу(ПервыйСимвол) ИЛИ апк_СловоСодержитТолькоКириллицу(ПервыйСимвол)) Тогда
			
			ВесКода = ВесКода - 2;
			ВсеСловаСЗаглавнойБуквы = Ложь;
		КонецЕсли;
		
		ПозицияСкобки = СтрНайти(Слово, "(");
		СимволПередСкобкой = Сред(Слово, ПозицияСкобки - 1, 1);
		Если ПозицияСкобки > 0 
			И (апк_СловоСодержитТолькоЛатиницу(СимволПередСкобкой)
			ИЛИ апк_СловоСодержитТолькоКириллицу(СимволПередСкобкой) 
			ИЛИ апк_ЭтоЧисло(СимволПередСкобкой)) Тогда
			
			ВесКода = ВесКода + 1;
			
		ИначеЕсли ПозицияСкобки > 0 Тогда 
			
			ВесКода = ВесКода - 1;
			
		КонецЕсли;
		
		ПозицияТочки = СтрНайти(Слово, ".");
		СимволПослеТочки = Сред(Слово, ПозицияТочки + 1, 1);
		СловоПослеТочки = Сред(Слово, ПозицияТочки + 1);
		СловоДоТочки = Лев(Слово, ПозицияТочки - 1);
		Пока ПозицияТочки > 0 Цикл
			Если (апк_СловоСодержитТолькоЛатиницу(СимволПослеТочки)
				ИЛИ апк_СловоСодержитТолькоКириллицу(СимволПослеТочки) 
				ИЛИ апк_ЭтоЧисло(СимволПослеТочки) 
				ИЛИ СимволПослеТочки = "_") Тогда
				
				Если апк_ЭтоЧисло(СловоДоТочки) Тогда
					ВесКода = ВесКода - 3;
				Иначе
					ВесКода = ВесКода + 1;
				КонецЕсли;
			Иначе
				ВесКода = ВесКода - 1;
			КонецЕсли;
			
			ПозицияТочки = СтрНайти(СловоПослеТочки, ".");
			СловоПослеТочки = Сред(СловоПослеТочки, ПозицияТочки + 1);
			СимволПослеТочки = Сред(СловоПослеТочки, ПозицияТочки + 1, 1);
		КонецЦикла;
		
		Для Каждого СимволКода Из МассивСимволовКода Цикл
			Если СтрНайти(Слово, СимволКода) > 0 Тогда
				ВесКода = ВесКода + 1;
			КонецЕсли;
		КонецЦикла;
		
		ПозицияДвоеточия = СтрНайти(Слово, ":");
		СимволПередДвоеточием = Сред(Слово, ПозицияДвоеточия - 1, 1);
		Если ПозицияДвоеточия > 0 
			И (апк_СловоСодержитТолькоЛатиницу(СимволПередДвоеточием)
			ИЛИ апк_СловоСодержитТолькоКириллицу(СимволПередДвоеточием) 
			ИЛИ апк_ЭтоЧисло(СимволПередДвоеточием))Тогда
			
			ВесКода = ВесКода - 2;
		КонецЕсли;
		
		ПозицияЗвездочка = СтрНайти(Слово, "*");
		ПозицияВыбрать = СтрНайти(Врег(Слово), "ВЫБРАТЬ");
		Если ПозицияЗвездочка > 0 И ПозицияВыбрать = 0 Тогда
			ВесКода = ВесКода - 2;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СимволКода Из МассивФразКомментария Цикл
		Если СтрНайти(ВРег(Строка), СимволКода) > 0 Тогда
			ВесКода = ВесКода - 5;
		КонецЕсли;
	КонецЦикла;
	
	Если ВсеСловаСЗаглавнойБуквы И МассивСлов.Количество() > 1 Тогда
		ВесКода = ВесКода + 2;
	КонецЕсли;
	
	Если МассивСлов.Количество() = 1 Тогда
		ВесКода = ВесКода - 2;
	КонецЕсли;
	
	Если Прав(СокрП(Строка), 1) = "." Тогда
		ВесКода = ВесКода - 5;
	КонецЕсли;
	
	Если СтрНайти(Строка, "...") > 0 Тогда
		ВесКода = ВесКода - 2;
	КонецЕсли;
	
	Если Лев(Строка, 1) = "=" Тогда
		ВесКода = ВесКода - 3;
	КонецЕсли;
	
	Если Прав(СтрокаВРег, 1) = ";" Тогда
		ВесКода = ВесКода + 1;
	КонецЕсли;
	
	Если Прав(СтрокаВРег, 1) = "-" Тогда
		ВесКода = ВесКода - 1;
	КонецЕсли;
	
	Если СтрокаСодержитОписаниеОбласти(СокрЛП(СтрокаМодуля)) Тогда
		ВесКода = ВесКода + 5;
	КонецЕсли;
	
	Если СтрокаМодуля = ВРег(СтрокаМодуля) Тогда
		ВесКода = ВесКода - 3;
	КонецЕсли;
	
	ЕстьСтрелка = (СтрНайти(СтрокаМодуля, "->") > 0);
	ЕстьТире = ЕстьСтрелка ИЛИ (СтрНайти(СтрокаМодуля, "-") > 0);
	ЕстьРавно = (СтрНайти(СтрокаМодуля, "=") > 0);
	ПервыйСимвол = Лев(СтрокаМодуля, 1);
	ПервыйСимволСокрЛ = Лев(СокрЛ(СтрокаМодуля), 1);
	ПоследнийСимвол = Прав(СокрП(СтрокаМодуля), 1);
	Если ЕстьТире И ЕстьРавно И (НЕ ЕстьСтрелка) Тогда 
		ВесКода = ВесКода + 10;
	ИначеЕсли (ПервыйСимволСокрЛ = "-") И (ПоследнийСимвол <> ";") Тогда 
		ВесКода = ВесКода - 10;
	ИначеЕсли (СтрЧислоВхождений(СтрокаМодуля, "-") >= 2) И (ПоследнийСимвол <> ";") Тогда 
		ВесКода = ВесКода - 10;
	ИначеЕсли (СтрНайти(СтрокаМодуля, ", ") > 0)
			И (СтрНайти(СтрокаМодуля, ";") = 0)
			И (СтрНайти(СтрокаМодуля, "(") = 0)
			И (СтрНайти(СтрокаМодуля, ")") = 0)
			И (СтрНайти(СтрокаМодуля, "+") = 0)
			И (СтрНайти(СтрокаМодуля, "=") = 0) Тогда 
			
			ВесКода = ВесКода - 10;
	КонецЕсли;
	
	Возврат ВесКода >= 0;
	
КонецФункции

Функция СтрокаВВерхнемРегистре(Строка)
		
	Если Строка = """" ИЛИ Строка = "{" ИЛИ Строка = "(" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ВРег(Строка) = Строка;
	
КонецФункции

// Получает список значений из переданной строки.
// Параметры:
//  Строка - Переданная строка со значениями.
//  Разделитель - Символ для разделения значений списка.
//  ВключатьПустые - Флаг указывающий, что будут включены пустые значения.
// Возвращаемое значение:
//  Массив
Функция апк_СтрРазделить(Знач Строка, Разделитель = ";", ВключатьПустые = Истина)
	
	МассивСлов = Новый Массив;
	Строка = СокрЛП(Строка);
	Если СтрНайти(Строка, Разделитель) = 0 Тогда
		Если НЕ ПустаяСтрока(Строка) Тогда 
			МассивСлов.Добавить(Строка);
		КонецЕсли;
		Возврат МассивСлов;
	КонецЕсли;
	
	Строка = СтрЗаменить(Строка, Разделитель, Символы.ПС);
	ВсегоСтрок = СтрЧислоСтрок(Строка);
	
	Для НомерСтроки = 1 По ВсегоСтрок Цикл
		
		ТекущаяСтрока = СокрЛП(СтрПолучитьСтроку(Строка, НомерСтроки));
		Если ПустаяСтрока(ТекущаяСтрока) И (НомерСтроки = ВсегоСтрок) Тогда 
			Прервать;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекущаяСтрока) И (НЕ ВключатьПустые) Тогда 
			Продолжить;
		КонецЕсли;
		
		МассивСлов.Добавить(ТекущаяСтрока);
	КонецЦикла;
	
	Возврат МассивСлов;
	
КонецФункции


Функция апк_ПолучитьРазделителиСлов()
	
	РазделителиСлов = Новый Соответствие;
	РазделителиСлов.Вставить("ЕСЛИ", 				Истина);
	РазделителиСлов.Вставить("#ЕСЛИ", 				Истина);
	РазделителиСлов.Вставить("ИНАЧЕЕСЛИ", 			Истина);
	РазделителиСлов.Вставить("КОНЕЦЕСЛИ", 			Истина);
	РазделителиСлов.Вставить("#КОНЕЦЕСЛИ", 			Истина);
	РазделителиСлов.Вставить("ТОГДА", 				Истина);
	РазделителиСлов.Вставить("И", 					Истина);
	РазделителиСлов.Вставить("ИЛИ", 				Истина);
	РазделителиСлов.Вставить("НЕ", 					Истина);
	РазделителиСлов.Вставить("ИЗ", 					Истина);
	РазделителиСлов.Вставить("КАЖДОГО", 			Истина);
	РазделителиСлов.Вставить("ДЛЯ", 				Истина);
	РазделителиСлов.Вставить("ЦИКЛ", 				Истина);
	РазделителиСлов.Вставить("ПОКА", 				Истина);
	РазделителиСлов.Вставить("ПРОЦЕДУРА", 			Истина);
	РазделителиСлов.Вставить("ФУНКЦИЯ", 			Истина);
	РазделителиСлов.Вставить("КОНЕЦПРОЦЕДУРЫ", 		Истина);
	РазделителиСлов.Вставить("КОНЕЦФУНКЦИИ", 		Истина);
	РазделителиСлов.Вставить("ЭКСПОРТ", 			Истина);
	РазделителиСлов.Вставить("ПЕРЕМ", 				Истина);
	РазделителиСлов.Вставить("ЗНАЧ", 				Истина);
	РазделителиСлов.Вставить("НОВЫЙ", 				Истина);
	РазделителиСлов.Вставить("ПЕРЕЙТИ", 			Истина);
	РазделителиСлов.Вставить("ВЫЗВАТЬИСКЛЮЧЕНИЕ", 	Истина);
	РазделителиСлов.Вставить("ПОПЫТКА", 			Истина);
	РазделителиСлов.Вставить("ИСКЛЮЧЕНИЕ", 			Истина);
	РазделителиСлов.Вставить("КОНЕЦПОПЫТКИ", 		Истина);
	РазделителиСлов.Вставить("ДОБАВИТЬОБРАБОТЧИК", 	Истина);
	РазделителиСлов.Вставить("УДАЛИТЬОБРАБОТЧИК", 	Истина);
	РазделителиСлов.Вставить("ВОЗВРАТ", 			Истина);
	РазделителиСлов.Вставить("НЕОПРЕДЕЛЕНО", 		Истина);
	РазделителиСлов.Вставить("НЕОПРЕДЕЛЕНО;", 		Истина);
	РазделителиСлов.Вставить("НЕОПРЕДЕЛЕНО,", 		Истина);
	РазделителиСлов.Вставить("<", 					Истина);
	РазделителиСлов.Вставить(">", 					Истина);
	РазделителиСлов.Вставить("=", 					Истина);
	РазделителиСлов.Вставить("+", 					Истина);
	РазделителиСлов.Вставить("*", 					Истина);
	РазделителиСлов.Вставить("/", 					Истина);
	РазделителиСлов.Вставить("%", 					Истина);
	РазделителиСлов.Вставить(".", 					Истина);
	РазделителиСлов.Вставить(",", 					Истина);
	РазделителиСлов.Вставить(";", 					Истина);
	РазделителиСлов.Вставить("(", 					Истина);
	РазделителиСлов.Вставить(")", 					Истина);
	
	Возврат РазделителиСлов;
	
КонецФункции

Функция апк_ПолучитьСтрокиТекстаЗапроса()
	
	СтрокиЗапроса = Новый Массив;
	СтрокиЗапроса.Добавить("ВЫБРАТЬ");
	СтрокиЗапроса.Добавить("Выбрать Первые");
	СтрокиЗапроса.Добавить("Выбрать *");
	СтрокиЗапроса.Добавить("|ИЗ");
	СтрокиЗапроса.Добавить("|ГДЕ");
	СтрокиЗапроса.Добавить(" ГДЕ ");
	СтрокиЗапроса.Добавить("|{ГДЕ");
	СтрокиЗапроса.Добавить("ГДЕ ЛОЖЬ");
	СтрокиЗапроса.Добавить("|ПОМЕСТИТЬ");
	СтрокиЗапроса.Добавить("|ВЫРАЗИТЬ");
	СтрокиЗапроса.Добавить("ВЫБОР КОГДА");
	СтрокиЗапроса.Добавить("ТОГДА");
	СтрокиЗапроса.Добавить("ИНДЕКСИРОВАТЬ ПО");
	СтрокиЗапроса.Добавить("УПОРЯДОЧИТЬ ПО");
	СтрокиЗапроса.Добавить("СГРУППИРОВАТЬ ПО");
	СтрокиЗапроса.Добавить("ИМЕЮЩИЕ");
	СтрокиЗапроса.Добавить("ОБЪЕДИНИТЬ");
	СтрокиЗапроса.Добавить("ОБЪЕДИНИТЬ ВСЕ");
	СтрокиЗапроса.Добавить("УНИЧТОЖИТЬ");
	СтрокиЗапроса.Добавить("NULL");
	СтрокиЗапроса.Добавить(" КАК");
	СтрокиЗапроса.Добавить("КАК ");
	СтрокиЗапроса.Добавить("ВОЗР");
	СтрокиЗапроса.Добавить("Возр");
	СтрокиЗапроса.Добавить("возр");
	СтрокиЗапроса.Добавить("УБЫВ");
	СтрокиЗапроса.Добавить("Убыв");
	СтрокиЗапроса.Добавить("ИТОГИ ПО");
	СтрокиЗапроса.Добавить("В (");
	СтрокиЗапроса.Добавить("В(");
	СтрокиЗапроса.Добавить("В ИЕРАРХИИ");
	СтрокиЗапроса.Добавить("ПЕРВЫЕ");
	СтрокиЗапроса.Добавить("ПОДОБНО");
	СтрокиЗапроса.Добавить("ПОМЕСТИТЬ");
	СтрокиЗапроса.Добавить("СОЕДИНЕНИЕ");
	СтрокиЗапроса.Добавить("НЕОПРЕДЕЛЕНО");
	СтрокиЗапроса.Добавить("ЗНАЧЕНИЕ");
	СтрокиЗапроса.Добавить("СУММА(");
	СтрокиЗапроса.Добавить("МЕЖДУ");
	СтрокиЗапроса.Добавить("НЕ ");
	СтрокиЗапроса.Добавить("И (");
	СтрокиЗапроса.Добавить("|	И");
	СтрокиЗапроса.Добавить("|И ");
	СтрокиЗапроса.Добавить(" И ");
	СтрокиЗапроса.Добавить("И &");
	СтрокиЗапроса.Добавить(" = &");
	СтрокиЗапроса.Добавить("ИЛИ");
	СтрокиЗапроса.Добавить(" ИЛИ ");
	СтрокиЗапроса.Добавить(" ИЛИ НЕ ");
	СтрокиЗапроса.Добавить(".ЭтоГруппа");
	СтрокиЗапроса.Добавить(".Ссылка");
	
	Возврат СтрокиЗапроса;
	
КонецФункции

Функция ПолучитьТаблицуСлужебныхСлов()
	
	ТаблицаСлужебныхСлов = Новый ТаблицаЗначений;
	ТаблицаСлужебныхСлов.Колонки.Добавить("Имя");
	ТаблицаСлужебныхСлов.Колонки.Добавить("Положение");
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ТОГДА";
	НоваяСтрока.Положение = "Конец";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ЦИКЛ";
	НоваяСтрока.Положение = "Конец";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ИНАЧЕ";
	НоваяСтрока.Положение = "Конец";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "КОНЕЦФУНКЦИИ";
	НоваяСтрока.Положение = "Конец";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "КОНЕЦПРОЦЕДУРЫ";
	НоваяСтрока.Положение = "Конец";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ЭКСПОРТ";
	НоваяСтрока.Положение = "Конец";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "КОНЕЦПОПЫТКИ";
	НоваяСтрока.Положение = "Конец";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ПРОДОЛЖИТЬ";
	НоваяСтрока.Положение = "Конец";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ПРЕРВАТЬ";
	НоваяСтрока.Положение = "Конец";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ФУНКЦИЯ";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ПРОЦЕДУРА";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ЕСЛИ ";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "КОНЕЦЕСЛИ";
	НоваяСтрока.Положение = "Конец";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ДЛЯ ";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ПЕРЕМ ";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ПОПЫТКА";
	НоваяСтрока.Положение = "Строка";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ИНАЧЕЕСЛИ";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ПОКА ";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ИСКЛЮЧЕНИЕ";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ВОЗВРАТ";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "#ОБЛАСТЬ";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "#КОНЕЦОБЛАСТИ";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "|";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "#ЕСЛИ";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "#КОНЕЦЕСЛИ";
	НоваяСтрока.Положение = "Начало";
	
	Возврат ТаблицаСлужебныхСлов;
	
КонецФункции


КоличествоСимволовДляПереносаКомментария = 120;
Настройки = Новый Соответствие;
//#Использовать logos
#Использовать WinExt
#Использовать extensions
#Использовать logging

Перем Лог;
Перем Обмен;
Перем ВыборИзСписка;

Функция ПолучитьТекстИзОкна()
	
	РаботаСТекстом = Новый РаботаСТекстом();
	Возврат РаботаСТекстом.ПолучитьТекстПоля();
	
	// ТекстМодуля = "";
	
	// МСПослатьКлавиши = Новый МСПослатьКлавиши;
	// МСПослатьКлавиши.ПослатьКлавиши("^+{Home}");
	// МСПослатьКлавиши.ПослатьКлавиши("^{INS}");
	// МСПослатьКлавиши.ПослатьКлавиши("{Right}");
	
	// ТекстМодуля = Обмен.ПолучитьТекстИзБуфераОбмена();
	
	// МСПослатьКлавиши.ПослатьКлавиши("^+{End}");
	// МСПослатьКлавиши.ПослатьКлавиши("^{INS}");
	// МСПослатьКлавиши.ПослатьКлавиши("{Left}");
	
	// ТекстМодуля = ТекстМодуля + Обмен.ПолучитьТекстИзБуфераОбмена();
	
	// Возврат ТекстМодуля;
	
КонецФункции

Функция ПолучитьТекстВышеКурсора()
	МСПослатьКлавиши = Новый МСПослатьКлавиши;
	МСПослатьКлавиши.ПослатьКлавиши("^+{Home}^{INS}{Right}");
	Возврат Обмен.ПолучитьТекстИзБуфераОбмена();
КонецФункции	

Функция ПолучитьНомерСтрокиНачалаМетода(Данные)
	
	РегВыражение = Новый РегулярноеВыражение("^\s*(процедура|функция|procedure|function)\s+");
	РегВыражение.ИгнорироватьРегистр = Истина;
	
	СтрокиМодуля = СтрРазделить(Данные, Символы.ПС, Истина);
	КолСтрок = СтрокиМодуля.Количество() - 1;
	Для А = -КолСтрок по 0 Цикл
		Стр = СтрокиМодуля.Получить( - А);
		Если РегВыражение.Совпадает(Стр) = Истина Тогда
			Возврат ( - А + 1);
		КонецЕсли;
	КонецЦикла;
	Возврат 0;
КонецФункции

Функция ПолучитьНомерСтроки(Стр)
	Позиция = СтрНайти(Стр, ")");
	Если Позиция = 0 Тогда
		Возврат 0;
	Иначе
		Возврат Число(Сред(Стр, 2, Позиция - 2));
	КонецЕсли;
	Возврат 0;
КонецФункции // ПолучитьНомерСтроки()

Функция ПолучитьСтрокиПоРегВыражению(Данные, СтрокаПоиска, РежимЗаполнения = 0)
	РегВыражение = Новый РегулярноеВыражение(СтрокаПоиска);
	РегВыражение.ИгнорироватьРегистр = Истина;
	
	СтрокиМодуля = СтрРазделить(Данные, Символы.ПС, Истина);
	
	СписМетодов = "";
	
	А = 0;
	Для Каждого Стр Из СтрокиМодуля Цикл
		А = А + 1;
		Совпадения = РегВыражение.НайтиСовпадения(Стр);
		Если Совпадения.Количество() > 0 Тогда
			Если РежимЗаполнения = "Поиск" Тогда
				СтрМетода = "(" + А + ") " + Стр;
				СписМетодов = СписМетодов + Символы.ПС + СтрМетода ;
			Иначе
				Для Каждого Сп Из Совпадения Цикл
					СпГр = Сп.Группы;
					СтрМетода = "(" + А + ") [" + Лев(СпГр[0].Значение, 1) + "] " + СпГр[2].Значение;
					СписМетодов = СписМетодов + Символы.ПС + СтрМетода ;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РежимЗаполнения = "Поиск" Тогда
		Обмен.ЗаписатьРезультатВФайл("tmp\last-search.txt", СокрЛП(СписМетодов));
	КонецЕсли;
	СтрМетода = Обмен.ВыбратьИзСписка(СокрЛП(СписМетодов), "tmp\last-select.txt");
	Возврат СтрМетода;
КонецФункции // ПолучитьСтрокиПоРегВыражению(Данные,СтрокаПоиска)

Функция ПолучитьСтрокиПоРегВыражению2(Данные, СтрокаПоиска, РежимЗаполнения = 0)
	// Попытка
	
	СписокДляВыбора = Новый Соответствие();
	СписокДляВыбора.Очистить();
	
	РегВыражение = Новый РегулярноеВыражение(СтрокаПоиска);
	РегВыражение.ИгнорироватьРегистр = Истина;
	
	СтрокиМодуля = СтрРазделить(Данные, Символы.ПС, Истина);
	
	А = 0;
	Для Каждого Стр Из СтрокиМодуля Цикл
		А = А + 1;
		Совпадения = РегВыражение.НайтиСовпадения(Стр);
		Если Совпадения.Количество() > 0 Тогда
			Если РежимЗаполнения = "Поиск" Тогда
				СтрМетода = "(" + А + ") " + Стр;
				СписокДляВыбора.Вставить(А, СтрМетода);
			ИначеЕсли РежимЗаполнения = "ВыборИмениМетода" Тогда
				Для Каждого Сп Из Совпадения Цикл
					СпГр = Сп.Группы;
					СтрМетода = СпГр[2].Значение;
					СписокДляВыбора.Вставить(СтрМетода, СтрМетода);
				КонецЦикла;
			Иначе
				Для Каждого Сп Из Совпадения Цикл
					СпГр = Сп.Группы;
					СтрМетода = "(" + А + ") [" + Лев(СпГр[0].Значение, 1) + "] " + СпГр[2].Значение;
					СписокДляВыбора.Вставить(А, СтрМетода);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	// Исключение
	// 	Лог.Добавить(ОписаниеОшибки());
	// КонецПопытки;
	
	Возврат СписокДляВыбора;
КонецФункции // ПолучитьСтрокиПоРегВыражению(Данные,СтрокаПоиска)

Функция ПодготовитьДанныеДляВыбора(СтрокаРВ, ВариантОбработки)

	РаботаСОкнами = Новый РаботаСОкнами();
	РаботаСОкнами.ЗапомнитьТекущееОкно();
	
	Данные = ПолучитьТекстИзОкна();
	СписокДляВыбора = ПолучитьСтрокиПоРегВыражению2(Данные, СтрокаРВ, ВариантОбработки);
	
	Если СписокДляВыбора.Количество() = 0 Тогда
		Обмен.УведомитьЧерезТрей("Нет данных для отображения", "Навигация по модулю");
		Возврат 0;
	КонецЕсли;
	
	ВыборИзСписка = ЗагрузитьСценарий("core/SelectValue.os");
	Результат = ВыборИзСписка.ВыбратьИзСписка(СписокДляВыбора, Истина);
	РаботаСОкнами.АктивироватьЗапомненноеОкно();

	Возврат Результат;

КонецФункции

Процедура ОбработатьМодуль(СтрокаРВ, ВариантОбработки="")
	
	НомСтр = ПодготовитьДанныеДляВыбора(СтрокаРВ, ВариантОбработки);

	Если НомСтр = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НомСтр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Обмен.ПерейтиКСтроке(НомСтр);
	
КонецПроцедуры

Процедура СписокМетодов() Экспорт
	
	ОбработатьМодуль("^\s*(процедура|функция|procedure|function)\s+(.*)\(");
	
КонецПроцедуры

Процедура СписокОбластей() Экспорт
	
	ОбработатьМодуль("^\s*(\#Область|\#region)\s+(.*)");
	
КонецПроцедуры

Процедура ВыбратьИмяМетода() Экспорт

	Результат = ПодготовитьДанныеДляВыбора("^\s*(процедура|функция|procedure|function)\s+(.*)\(", "ВыборИмениМетода");
	Обмен.УстановитьТекстВВыделение(Результат);

КонецПроцедуры

Процедура ПоискРегулярныеВыражения() Экспорт
	Данные = ПолучитьТекстИзОкна();
	ДанныеВыбора = ""
	+ "^/?([^/]/?)*ВыражениеТолькоНеКомментариях" + Символы.ПС
	+ "//+.*ВыражениеТолькоВКомментариях" + Символы.ПС
	+ "//+.*TODO" + Символы.ПС
	+ "//+.*FIXME" + Символы.ПС
	+ "//+.*BUG";
	
	СтрВыбора = Обмен.ВыбратьИзСписка(ДанныеВыбора);
	Если СтрВыбора <> "" Тогда
		
		Стр = ПолучитьСтрокиПоРегВыражению(Данные, СтрВыбора, "Поиск");	
		НомСтр = ПолучитьНомерСтроки(Стр);
		ЗавершитьРаботу(НомСтр);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РезультатПоследнегоПоиска() Экспорт
	
	ДанныеВыбора = Обмен.ПолучитьТекстИзФайла("tmp\last-search.txt");
	Стр = Обмен.ВыбратьИзСписка(ДанныеВыбора);
	НомСтр = ПолучитьНомерСтроки(Стр);
	ЗавершитьРаботу(НомСтр);
	
КонецПроцедуры

Процедура ПоказатьПоследнийСписокВыбора() Экспорт
	
	ДанныеВыбора = Обмен.ПолучитьТекстИзФайла("tmp\last-select.txt");
	Стр = Обмен.ВыбратьИзСписка(ДанныеВыбора);
	НомСтр = ПолучитьНомерСтроки(Стр);
	ЗавершитьРаботу(НомСтр);
	
КонецПроцедуры

Процедура ПерейтиВНачалоМетода() Экспорт

	МСПослатьКлавиши = Новый МСПослатьКлавиши;
	МСПослатьКлавиши.ПослатьКлавиши("^+{Home}^{INS}{Right}");

	Данные = Обмен.ПолучитьТекстИзБуфераОбмена();

	НомерСтр = ПолучитьНомерСтрокиНачалаМетода(Данные);
	Если НомерСтр > 0 Тогда
		Обмен.ПерейтиКСтроке(НомерСтр);
		МСПослатьКлавиши = Новый МСПослатьКлавиши;
		МСПослатьКлавиши.ПослатьКлавиши("{HOME}");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерейтиВКонецМетода() Экспорт

	МСПослатьКлавиши = Новый МСПослатьКлавиши;
	МСПослатьКлавиши.ПослатьКлавиши("^+{Home}^{INS}{Right}");
	Данные = Обмен.ПолучитьТекстИзБуфераОбмена();
	
	НомерСтр = ПолучитьНомерСтрокиНачалаМетода(Данные);
	Если НомерСтр > 0 Тогда
		Обмен.ПерейтиКСтроке(НомерСтр);
		
		МСПослатьКлавиши.ПослатьКлавиши("{HOME}");
		МСПослатьКлавиши.ПослатьКвадратнуюСкобкуЛевую();
		МСПослатьКлавиши.ПослатьКлавиши("{HOME}");
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяСекции(Данные) Экспорт
	
	РегВыражение = Новый РегулярноеВыражение("^\s*(\#Область|\#region)\s+(.*)");
	РегВыражение.ИгнорироватьРегистр = Истина;
	
	СтрокиМодуля = СтрРазделить(Данные, Символы.ПС, Истина);
	КолСтрок = СтрокиМодуля.Количество() - 1;
	Для А = -КолСтрок по 0 Цикл
		Стр = СтрокиМодуля.Получить( - А);
		Совпадения = РегВыражение.НайтиСовпадения(Стр);
		Если Совпадения.Количество() > 0 Тогда
			Для Каждого Сп Из Совпадения Цикл
				СпГр = Сп.Группы;
				Возврат СокрЛП(СпГр[2].Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ИмяМетода(Данные) Экспорт
	
	РегВыражение = Новый РегулярноеВыражение("^\s*(процедура|функция|procedure|function)\s+(.*)\(");
	РегВыражение.ИгнорироватьРегистр = Истина;
	
	СтрокиМодуля = СтрРазделить(Данные, Символы.ПС, Истина);
	КолСтрок = СтрокиМодуля.Количество() - 1;
	Для А = -КолСтрок по 0 Цикл
		Стр = СтрокиМодуля.Получить( - А);
		Совпадения = РегВыражение.НайтиСовпадения(Стр);
		Если Совпадения.Количество() > 0 Тогда
			Для Каждого Сп Из Совпадения Цикл
				СпГр = Сп.Группы;
				Возврат СокрЛП(СпГр[2].Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ПоказатьИмяМетода() Экспорт

	Данные = Обмен.ТекстВышеКурсора();
	ИмяМетода = ИмяМетода(Данные);
	Обмен.ВвестиЗначение(ИмяМетода);
КонецПроцедуры

Процедура ПоказатьИмяСекции() Экспорт
	Данные = Обмен.ТекстВышеКурсора();
	ИмяМетода = ИмяСекции(Данные);
	Обмен.ВвестиЗначение(ИмяМетода);
КонецПроцедуры

Процедура ВыбратьРанееНабранноеСлово() Экспорт
	
	Данные = ПолучитьТекстИзОкна();
	
	СтрДанные = Данные;
	СтрДанные = СтрЗаменить(СтрДанные, Символы.ПС, " ");
	СтрДанные = СтрЗаменить(СтрДанные, Символы.ВК, " ");
	
	РегВыражение = Новый РегулярноеВыражение("(\s|>|<|\*|}|{|=|\||\""""|\.|,|:|;|-|\+|\(|\)|\b|\r\n)");
	РегВыражение.ИгнорироватьРегистр = Истина;
	РегВыражение.Многострочный = Истина;
	СтрДанные = РегВыражение.Заменить(СтрДанные, " ");
	
	Данные = СтрРазделить(СтрДанные, " ", Ложь);
	
	УникальныеСлова = Новый Соответствие();
	
	Для Каждого Стр Из Данные Цикл
		Стр = СокрЛП(Стр);
		Если СтрДлина(Стр) > 5 Тогда
			УникальныеСлова.Вставить(Стр, Стр);
		КонецЕсли;
	КонецЦикла;
	
	СловарьЗаготовок = Обмен.ПолучитьТекстИзФайла("words.txt");
	Данные = СтрРазделить(СловарьЗаготовок, Символы.ПС, Ложь);

	Для Каждого Стр Из Данные Цикл
		Стр = СокрЛП(Стр);
		УникальныеСлова.Вставить(Стр, Стр);
	КонецЦикла;
	
	Результат = ВыборИзСписка.ВыбратьИзСписка(УникальныеСлова);
	Обмен.ЗаписатьРезультатВФайл("tmp\module.txt", Результат);
	
КонецПроцедуры


Процедура ПриСозданииОбъекта()
	
	Лог = Новый ЛогированиеВФайл("tmp/log.log");

	Параметры = АргументыКоманднойСтроки;
	Если Параметры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Обмен = ЗагрузитьСценарий("core\Обмен.os");
	ВыборИзСписка = ЗагрузитьСценарий("core\SelectValue.os");
	
	Если Параметры[0] = "НачалоМетода" Тогда
		ПерейтиВНачалоМетода();
	ИначеЕсли Параметры[0] = "КонецМетода" Тогда
		ПерейтиВКонецМетода();
	ИначеЕсли Параметры[0] = "СписокМетодов" Тогда
		СписокМетодов();
	ИначеЕсли Параметры[0] = "СписокОбластей" Тогда
		СписокОбластей();
	ИначеЕсли Параметры[0] = "RegExSearch" Тогда
		ПоискРегулярныеВыражения();
	ИначеЕсли Параметры[0] = "РезультатПоследнегоПоиска" Тогда
		РезультатПоследнегоПоиска();
	ИначеЕсли Параметры[0] = "ПоказатьПоследнийСписокВыбора" Тогда
		ПоказатьПоследнийСписокВыбора();
	ИначеЕсли Параметры[0] = "ИмяМетода" Тогда
		ПоказатьИмяМетода();
	ИначеЕсли Параметры[0] = "ИмяСекции" Тогда
		ПоказатьИмяСекции();
	ИначеЕсли Параметры[0] = "ВыборИмениМетода" Тогда
		ВыбратьИмяМетода();
	ИначеЕсли НРег(Параметры[0]) = "allwords" Тогда
		ВыбратьРанееНабранноеСлово();
	КонецЕсли;
	
	//	Лог.Закрыть(); // при включении логирования в файл рекомендуется закрывать лог.
	
КонецПроцедуры